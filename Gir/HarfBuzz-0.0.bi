'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2019 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/HarfBuzz-0.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
TYPE AS gint /'int'/ hb_bool_t
TYPE AS guint32 /'uint32_t'/ hb_codepoint_t
TYPE AS hb_font_get_glyph_advance_func_t hb_font_get_glyph_h_advance_func_t
TYPE AS hb_font_get_glyph_kerning_func_t hb_font_get_glyph_h_kerning_func_t
TYPE AS hb_font_get_glyph_origin_func_t hb_font_get_glyph_h_origin_func_t
TYPE AS hb_font_get_glyph_advance_func_t hb_font_get_glyph_v_advance_func_t
TYPE AS hb_font_get_glyph_kerning_func_t hb_font_get_glyph_v_kerning_func_t
TYPE AS hb_font_get_glyph_origin_func_t hb_font_get_glyph_v_origin_func_t
TYPE AS guint32 /'uint32_t'/ hb_mask_t
TYPE AS gint32 /'int32_t'/ hb_position_t
TYPE AS guint32 /'uint32_t'/ hb_tag_t
#DEFINE HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT 65533
#DEFINE HB_OT_LAYOUT_DEFAULT_LANGUAGE_INDEX 65535
#DEFINE HB_OT_LAYOUT_NO_FEATURE_INDEX 65535
#DEFINE HB_OT_LAYOUT_NO_SCRIPT_INDEX 65535
#DEFINE HB_SET_VALUE_INVALID 4294967295
#DEFINE HB_UNICODE_MAX_DECOMPOSITION_LEN 19
#DEFINE HB_VERSION_MAJOR 1
#DEFINE HB_VERSION_MICRO 1
#DEFINE HB_VERSION_MINOR 0
#DEFINE HB_VERSION_STRING @!"1.0.1"
TYPE AS _hb_blob_t hb_blob_t
TYPE AS LONG hb_buffer_cluster_level_t
ENUM
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1
  HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = 2
  HB_BUFFER_CLUSTER_LEVEL_DEFAULT = 0
END ENUM
TYPE AS LONG hb_buffer_content_type_t
ENUM
  HB_BUFFER_CONTENT_TYPE_INVALID = 0
  HB_BUFFER_CONTENT_TYPE_UNICODE = 1
  HB_BUFFER_CONTENT_TYPE_GLYPHS = 2
END ENUM
TYPE AS LONG hb_buffer_flags_t
ENUM
  HB_BUFFER_FLAG_DEFAULT = 0
  HB_BUFFER_FLAG_BOT = 1
  HB_BUFFER_FLAG_EOT = 2
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 4
END ENUM
TYPE AS LONG hb_buffer_serialize_flags_t
ENUM
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 1
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 2
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 4
END ENUM
TYPE AS LONG hb_buffer_serialize_format_t
ENUM
  HB_BUFFER_SERIALIZE_FORMAT_TEXT = 1413830740
  HB_BUFFER_SERIALIZE_FORMAT_JSON = 1246973774
  HB_BUFFER_SERIALIZE_FORMAT_INVALID = 0
END ENUM
TYPE AS _hb_buffer_t hb_buffer_t
TYPE AS LONG hb_direction_t
ENUM
  HB_DIRECTION_INVALID = 0
  HB_DIRECTION_LTR = 4
  HB_DIRECTION_RTL = 5
  HB_DIRECTION_TTB = 6
  HB_DIRECTION_BTT = 7
END ENUM
TYPE AS _hb_face_t hb_face_t
TYPE AS _hb_feature_t hb_feature_t
TYPE AS _hb_font_funcs_t hb_font_funcs_t
TYPE AS _hb_font_t hb_font_t
TYPE AS _hb_glyph_extents_t hb_glyph_extents_t
TYPE AS _hb_glyph_info_t hb_glyph_info_t
TYPE AS _hb_glyph_position_t hb_glyph_position_t
TYPE AS _hb_language_t hb_language_t
TYPE AS LONG hb_memory_mode_t
ENUM
  HB_MEMORY_MODE_DUPLICATE = 0
  HB_MEMORY_MODE_READONLY = 1
  HB_MEMORY_MODE_WRITABLE = 2
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3
END ENUM
TYPE AS LONG hb_ot_layout_glyph_class_t
ENUM
  HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED = 0
  HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH = 1
  HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE = 2
  HB_OT_LAYOUT_GLYPH_CLASS_MARK = 3
  HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT = 4
END ENUM
TYPE AS LONG hb_script_t
ENUM
  HB_SCRIPT_COMMON = 1517910393
  HB_SCRIPT_INHERITED = 1516858984
  HB_SCRIPT_UNKNOWN = 1517976186
  HB_SCRIPT_ARABIC = 1098015074
  HB_SCRIPT_ARMENIAN = 1098018158
  HB_SCRIPT_BENGALI = 1113943655
  HB_SCRIPT_CYRILLIC = 1132032620
  HB_SCRIPT_DEVANAGARI = 1147500129
  HB_SCRIPT_GEORGIAN = 1197830002
  HB_SCRIPT_GREEK = 1198679403
  HB_SCRIPT_GUJARATI = 1198877298
  HB_SCRIPT_GURMUKHI = 1198879349
  HB_SCRIPT_HANGUL = 1214344807
  HB_SCRIPT_HAN = 1214344809
  HB_SCRIPT_HEBREW = 1214603890
  HB_SCRIPT_HIRAGANA = 1214870113
  HB_SCRIPT_KANNADA = 1265525857
  HB_SCRIPT_KATAKANA = 1264676449
  HB_SCRIPT_LAO = 1281453935
  HB_SCRIPT_LATIN = 1281455214
  HB_SCRIPT_MALAYALAM = 1298954605
  HB_SCRIPT_ORIYA = 1332902241
  HB_SCRIPT_TAMIL = 1415671148
  HB_SCRIPT_TELUGU = 1415933045
  HB_SCRIPT_THAI = 1416126825
  HB_SCRIPT_TIBETAN = 1416192628
  HB_SCRIPT_BOPOMOFO = 1114599535
  HB_SCRIPT_BRAILLE = 1114792297
  HB_SCRIPT_CANADIAN_SYLLABICS = 1130458739
  HB_SCRIPT_CHEROKEE = 1130915186
  HB_SCRIPT_ETHIOPIC = 1165256809
  HB_SCRIPT_KHMER = 1265134962
  HB_SCRIPT_MONGOLIAN = 1299148391
  HB_SCRIPT_MYANMAR = 1299803506
  HB_SCRIPT_OGHAM = 1332175213
  HB_SCRIPT_RUNIC = 1383427698
  HB_SCRIPT_SINHALA = 1399418472
  HB_SCRIPT_SYRIAC = 1400468067
  HB_SCRIPT_THAANA = 1416126817
  HB_SCRIPT_YI = 1500080489
  HB_SCRIPT_DESERET = 1148416628
  HB_SCRIPT_GOTHIC = 1198486632
  HB_SCRIPT_OLD_ITALIC = 1232363884
  HB_SCRIPT_BUHID = 1114990692
  HB_SCRIPT_HANUNOO = 1214344815
  HB_SCRIPT_TAGALOG = 1416064103
  HB_SCRIPT_TAGBANWA = 1415669602
  HB_SCRIPT_CYPRIOT = 1131442804
  HB_SCRIPT_LIMBU = 1281977698
  HB_SCRIPT_LINEAR_B = 1281977954
  HB_SCRIPT_OSMANYA = 1332964705
  HB_SCRIPT_SHAVIAN = 1399349623
  HB_SCRIPT_TAI_LE = 1415670885
  HB_SCRIPT_UGARITIC = 1432838514
  HB_SCRIPT_BUGINESE = 1114990441
  HB_SCRIPT_COPTIC = 1131376756
  HB_SCRIPT_GLAGOLITIC = 1198285159
  HB_SCRIPT_KHAROSHTHI = 1265131890
  HB_SCRIPT_NEW_TAI_LUE = 1415670901
  HB_SCRIPT_OLD_PERSIAN = 1483761007
  HB_SCRIPT_SYLOTI_NAGRI = 1400466543
  HB_SCRIPT_TIFINAGH = 1415999079
  HB_SCRIPT_BALINESE = 1113681001
  HB_SCRIPT_CUNEIFORM = 1483961720
  HB_SCRIPT_NKO = 1315663727
  HB_SCRIPT_PHAGS_PA = 1349017959
  HB_SCRIPT_PHOENICIAN = 1349021304
  HB_SCRIPT_CARIAN = 1130459753
  HB_SCRIPT_CHAM = 1130914157
  HB_SCRIPT_KAYAH_LI = 1264675945
  HB_SCRIPT_LEPCHA = 1281716323
  HB_SCRIPT_LYCIAN = 1283023721
  HB_SCRIPT_LYDIAN = 1283023977
  HB_SCRIPT_OL_CHIKI = 1332503403
  HB_SCRIPT_REJANG = 1382706791
  HB_SCRIPT_SAURASHTRA = 1398895986
  HB_SCRIPT_SUNDANESE = 1400204900
  HB_SCRIPT_VAI = 1449224553
  HB_SCRIPT_AVESTAN = 1098281844
  HB_SCRIPT_BAMUM = 1113681269
  HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = 1164409200
  HB_SCRIPT_IMPERIAL_ARAMAIC = 1098018153
  HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = 1349020777
  HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = 1349678185
  HB_SCRIPT_JAVANESE = 1247901281
  HB_SCRIPT_KAITHI = 1265920105
  HB_SCRIPT_LISU = 1281979253
  HB_SCRIPT_MEETEI_MAYEK = 1299473769
  HB_SCRIPT_OLD_SOUTH_ARABIAN = 1398895202
  HB_SCRIPT_OLD_TURKIC = 1332898664
  HB_SCRIPT_SAMARITAN = 1398893938
  HB_SCRIPT_TAI_THAM = 1281453665
  HB_SCRIPT_TAI_VIET = 1415673460
  HB_SCRIPT_BATAK = 1113683051
  HB_SCRIPT_BRAHMI = 1114792296
  HB_SCRIPT_MANDAIC = 1298230884
  HB_SCRIPT_CHAKMA = 1130457965
  HB_SCRIPT_MEROITIC_CURSIVE = 1298494051
  HB_SCRIPT_MEROITIC_HIEROGLYPHS = 1298494063
  HB_SCRIPT_MIAO = 1349284452
  HB_SCRIPT_SHARADA = 1399353956
  HB_SCRIPT_SORA_SOMPENG = 1399812705
  HB_SCRIPT_TAKRI = 1415670642
  HB_SCRIPT_BASSA_VAH = 1113682803
  HB_SCRIPT_CAUCASIAN_ALBANIAN = 1097295970
  HB_SCRIPT_DUPLOYAN = 1148547180
  HB_SCRIPT_ELBASAN = 1164730977
  HB_SCRIPT_GRANTHA = 1198678382
  HB_SCRIPT_KHOJKI = 1265135466
  HB_SCRIPT_KHUDAWADI = 1399418468
  HB_SCRIPT_LINEAR_A = 1281977953
  HB_SCRIPT_MAHAJANI = 1298229354
  HB_SCRIPT_MANICHAEAN = 1298230889
  HB_SCRIPT_MENDE_KIKAKUI = 1298493028
  HB_SCRIPT_MODI = 1299145833
  HB_SCRIPT_MRO = 1299345263
  HB_SCRIPT_NABATAEAN = 1315070324
  HB_SCRIPT_OLD_NORTH_ARABIAN = 1315009122
  HB_SCRIPT_OLD_PERMIC = 1348825709
  HB_SCRIPT_PAHAWH_HMONG = 1215131239
  HB_SCRIPT_PALMYRENE = 1348562029
  HB_SCRIPT_PAU_CIN_HAU = 1348564323
  HB_SCRIPT_PSALTER_PAHLAVI = 1349020784
  HB_SCRIPT_SIDDHAM = 1399415908
  HB_SCRIPT_TIRHUTA = 1416196712
  HB_SCRIPT_WARANG_CITI = 1466004065
  HB_SCRIPT_AHOM = 1097363309
  HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = 1215067511
  HB_SCRIPT_HATRAN = 1214346354
  HB_SCRIPT_MULTANI = 1299541108
  HB_SCRIPT_OLD_HUNGARIAN = 1215655527
  HB_SCRIPT_SIGNWRITING = 1399287415
  HB_SCRIPT_INVALID = 0
END ENUM
TYPE AS _hb_segment_properties_t hb_segment_properties_t
TYPE AS _hb_set_t hb_set_t
TYPE AS _hb_shape_plan_t hb_shape_plan_t
TYPE AS LONG hb_unicode_combining_class_t
ENUM
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0
  HB_UNICODE_COMBINING_CLASS_OVERLAY = 1
  HB_UNICODE_COMBINING_CLASS_NUKTA = 7
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8
  HB_UNICODE_COMBINING_CLASS_VIRAMA = 9
  HB_UNICODE_COMBINING_CLASS_CCC10 = 10
  HB_UNICODE_COMBINING_CLASS_CCC11 = 11
  HB_UNICODE_COMBINING_CLASS_CCC12 = 12
  HB_UNICODE_COMBINING_CLASS_CCC13 = 13
  HB_UNICODE_COMBINING_CLASS_CCC14 = 14
  HB_UNICODE_COMBINING_CLASS_CCC15 = 15
  HB_UNICODE_COMBINING_CLASS_CCC16 = 16
  HB_UNICODE_COMBINING_CLASS_CCC17 = 17
  HB_UNICODE_COMBINING_CLASS_CCC18 = 18
  HB_UNICODE_COMBINING_CLASS_CCC19 = 19
  HB_UNICODE_COMBINING_CLASS_CCC20 = 20
  HB_UNICODE_COMBINING_CLASS_CCC21 = 21
  HB_UNICODE_COMBINING_CLASS_CCC22 = 22
  HB_UNICODE_COMBINING_CLASS_CCC23 = 23
  HB_UNICODE_COMBINING_CLASS_CCC24 = 24
  HB_UNICODE_COMBINING_CLASS_CCC25 = 25
  HB_UNICODE_COMBINING_CLASS_CCC26 = 26
  HB_UNICODE_COMBINING_CLASS_CCC27 = 27
  HB_UNICODE_COMBINING_CLASS_CCC28 = 28
  HB_UNICODE_COMBINING_CLASS_CCC29 = 29
  HB_UNICODE_COMBINING_CLASS_CCC30 = 30
  HB_UNICODE_COMBINING_CLASS_CCC31 = 31
  HB_UNICODE_COMBINING_CLASS_CCC32 = 32
  HB_UNICODE_COMBINING_CLASS_CCC33 = 33
  HB_UNICODE_COMBINING_CLASS_CCC34 = 34
  HB_UNICODE_COMBINING_CLASS_CCC35 = 35
  HB_UNICODE_COMBINING_CLASS_CCC36 = 36
  HB_UNICODE_COMBINING_CLASS_CCC84 = 84
  HB_UNICODE_COMBINING_CLASS_CCC91 = 91
  HB_UNICODE_COMBINING_CLASS_CCC103 = 103
  HB_UNICODE_COMBINING_CLASS_CCC107 = 107
  HB_UNICODE_COMBINING_CLASS_CCC118 = 118
  HB_UNICODE_COMBINING_CLASS_CCC122 = 122
  HB_UNICODE_COMBINING_CLASS_CCC129 = 129
  HB_UNICODE_COMBINING_CLASS_CCC130 = 130
  HB_UNICODE_COMBINING_CLASS_CCC133 = 132
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218
  HB_UNICODE_COMBINING_CLASS_BELOW = 220
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222
  HB_UNICODE_COMBINING_CLASS_LEFT = 224
  HB_UNICODE_COMBINING_CLASS_RIGHT = 226
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228
  HB_UNICODE_COMBINING_CLASS_ABOVE = 230
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234
  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240
  HB_UNICODE_COMBINING_CLASS_INVALID = 255
END ENUM
TYPE AS _hb_unicode_funcs_t hb_unicode_funcs_t
TYPE AS LONG hb_unicode_general_category_t
ENUM
  HB_UNICODE_GENERAL_CATEGORY_CONTROL = 0
  HB_UNICODE_GENERAL_CATEGORY_FORMAT = 1
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED = 2
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE = 3
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE = 4
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER = 5
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER = 6
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER = 7
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER = 8
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER = 9
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK = 10
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK = 11
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK = 12
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER = 13
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER = 14
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER = 15
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION = 16
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION = 17
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION = 18
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION = 19
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION = 20
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION = 21
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION = 22
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL = 23
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL = 24
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL = 25
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL = 26
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR = 27
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR = 28
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR = 29
END ENUM
TYPE AS _hb_user_data_key_t hb_user_data_key_t
EXTERN "C" LIB "harfbuzz"
' P_X

UNION hb_var_int_t
  AS guint32 /'uint32_t'/ u32
  AS gint32 /'int32_t'/ i32
  AS guint16 /'uint16_t'/ u16
  AS gint16 /'int16_t'/ i16
  AS guint8 /'uint8_t'/ u8
  AS gint8 /'int8_t'/ i8
END UNION
' P_3

DECLARE FUNCTION hb_gobject_buffer_cluster_level_get_type() AS GType
#DEFINE HB_TYPE_GOBJECT_BUFFER_CLUSTER_LEVEL (hb_gobject_buffer_cluster_level_get_type())
DECLARE FUNCTION hb_gobject_buffer_content_type_get_type() AS GType
#DEFINE HB_TYPE_GOBJECT_BUFFER_CONTENT_TYPE (hb_gobject_buffer_content_type_get_type())
DECLARE FUNCTION hb_gobject_buffer_serialize_format_get_type() AS GType
#DEFINE HB_TYPE_GOBJECT_BUFFER_SERIALIZE_FORMAT (hb_gobject_buffer_serialize_format_get_type())
TYPE hb_destroy_func_t AS SUB CDECL(BYVAL AS any /'void'/ PTR)
DECLARE FUNCTION hb_gobject_direction_get_type() AS GType
#DEFINE HB_TYPE_GOBJECT_DIRECTION (hb_gobject_direction_get_type())
TYPE _hb_feature_t
  AS hb_tag_t tag
  AS guint32 /'uint32_t'/ value
  AS guint /'unsigned'/ start
  AS guint /'unsigned'/ end
END TYPE
DECLARE SUB hb_feature_to_string(BYVAL AS hb_feature_t PTR, BYVAL AS char PTR, BYVAL AS guint /'unsigned int'/)
TYPE hb_font_get_glyph_advance_func_t AS FUNCTION CDECL(BYVAL AS hb_font_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_codepoint_t, BYVAL AS any /'void'/ PTR) AS hb_position_t
TYPE hb_font_get_glyph_contour_point_func_t AS FUNCTION CDECL(BYVAL AS hb_font_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_codepoint_t, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR, BYVAL AS any /'void'/ PTR) AS hb_bool_t
TYPE hb_font_get_glyph_extents_func_t AS FUNCTION CDECL(BYVAL AS hb_font_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_glyph_extents_t PTR, BYVAL AS any /'void'/ PTR) AS hb_bool_t
TYPE hb_font_get_glyph_from_name_func_t AS FUNCTION CDECL(BYVAL AS hb_font_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS const gchar /'const char'/ PTR, BYVAL AS gint /'int'/, BYVAL AS hb_codepoint_t PTR, BYVAL AS any /'void'/ PTR) AS hb_bool_t
TYPE hb_font_get_glyph_func_t AS FUNCTION CDECL(BYVAL AS hb_font_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t PTR, BYVAL AS any /'void'/ PTR) AS hb_bool_t
TYPE hb_font_get_glyph_kerning_func_t AS FUNCTION CDECL(BYVAL AS hb_font_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t, BYVAL AS any /'void'/ PTR) AS hb_position_t
TYPE hb_font_get_glyph_name_func_t AS FUNCTION CDECL(BYVAL AS hb_font_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_codepoint_t, BYVAL AS char PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS any /'void'/ PTR) AS hb_bool_t
TYPE hb_font_get_glyph_origin_func_t AS FUNCTION CDECL(BYVAL AS hb_font_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR, BYVAL AS any /'void'/ PTR) AS hb_bool_t
TYPE _hb_glyph_extents_t
  AS hb_position_t x_bearing
  AS hb_position_t y_bearing
  AS hb_position_t width
  AS hb_position_t height
END TYPE
TYPE _hb_glyph_info_t
  AS hb_codepoint_t codepoint
  AS hb_mask_t mask
  AS guint32 /'uint32_t'/ cluster
  AS hb_var_int_t var1
  AS hb_var_int_t var2
END TYPE
TYPE _hb_glyph_position_t
  AS hb_position_t x_advance
  AS hb_position_t y_advance
  AS hb_position_t x_offset
  AS hb_position_t y_offset
  AS hb_var_int_t var
END TYPE
DECLARE FUNCTION hb_language_to_string(BYVAL AS hb_language_t ptr /'hb_language_t'/) AS const gchar /'const char'/ PTR
TYPE hb_reference_table_func_t AS FUNCTION CDECL(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS any /'void'/ PTR) AS hb_blob_t PTR
TYPE _hb_segment_properties_t
  AS hb_direction_t direction
  AS hb_script_t script
  AS hb_language_t ptr /'hb_language_t'/ language
  AS any /'void'/ PTR reserved1
  AS any /'void'/ PTR reserved2
END TYPE
DECLARE FUNCTION hb_gobject_memory_mode_get_type() AS GType
#DEFINE HB_TYPE_GOBJECT_MEMORY_MODE (hb_gobject_memory_mode_get_type())
DECLARE FUNCTION hb_gobject_ot_layout_glyph_class_get_type() AS GType
#DEFINE HB_TYPE_GOBJECT_OT_LAYOUT_GLYPH_CLASS (hb_gobject_ot_layout_glyph_class_get_type())
DECLARE FUNCTION hb_gobject_script_get_type() AS GType
#DEFINE HB_TYPE_GOBJECT_SCRIPT (hb_gobject_script_get_type())
TYPE hb_unicode_combining_class_func_t AS FUNCTION CDECL(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS any /'void'/ PTR) AS hb_unicode_combining_class_t
TYPE hb_unicode_compose_func_t AS FUNCTION CDECL(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t PTR, BYVAL AS any /'void'/ PTR) AS hb_bool_t
TYPE hb_unicode_decompose_compatibility_func_t AS FUNCTION CDECL(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t PTR, BYVAL AS any /'void'/ PTR) AS guint /'unsigned int'/
TYPE hb_unicode_decompose_func_t AS FUNCTION CDECL(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t PTR, BYVAL AS hb_codepoint_t PTR, BYVAL AS any /'void'/ PTR) AS hb_bool_t
TYPE hb_unicode_eastasian_width_func_t AS FUNCTION CDECL(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS any /'void'/ PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_gobject_unicode_combining_class_get_type() AS GType
#DEFINE HB_TYPE_GOBJECT_UNICODE_COMBINING_CLASS (hb_gobject_unicode_combining_class_get_type())
TYPE hb_unicode_general_category_func_t AS FUNCTION CDECL(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS any /'void'/ PTR) AS hb_unicode_general_category_t
TYPE hb_unicode_mirroring_func_t AS FUNCTION CDECL(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS any /'void'/ PTR) AS hb_codepoint_t
TYPE hb_unicode_script_func_t AS FUNCTION CDECL(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS any /'void'/ PTR) AS hb_script_t
TYPE _hb_user_data_key_t
  AS char /'?'/ unused
END TYPE
DECLARE FUNCTION hb_gobject_unicode_general_category_get_type() AS GType
#DEFINE HB_TYPE_GOBJECT_UNICODE_GENERAL_CATEGORY (hb_gobject_unicode_general_category_get_type())
' P_4

DECLARE FUNCTION hb_blob_create(BYVAL AS const gchar /'const char'/ PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_memory_mode_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t) AS hb_blob_t PTR
DECLARE FUNCTION hb_blob_create_sub_blob(BYVAL AS hb_blob_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/) AS hb_blob_t PTR
DECLARE SUB hb_blob_destroy(BYVAL AS hb_blob_t PTR)
DECLARE FUNCTION hb_blob_get_data(BYVAL AS hb_blob_t PTR, BYVAL AS guint /'unsigned int'/ PTR) AS char PTR
DECLARE FUNCTION hb_blob_get_data_writable(BYVAL AS hb_blob_t PTR, BYVAL AS guint /'unsigned int'/ PTR) AS char PTR
DECLARE FUNCTION hb_blob_get_empty() AS hb_blob_t PTR
DECLARE FUNCTION hb_blob_get_length(BYVAL AS hb_blob_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_blob_get_user_data(BYVAL AS hb_blob_t PTR, BYVAL AS hb_user_data_key_t PTR) AS any /'void'/ PTR
DECLARE FUNCTION hb_blob_is_immutable(BYVAL AS hb_blob_t PTR) AS hb_bool_t
DECLARE SUB hb_blob_make_immutable(BYVAL AS hb_blob_t PTR)
DECLARE FUNCTION hb_blob_reference(BYVAL AS hb_blob_t PTR) AS hb_blob_t PTR
DECLARE FUNCTION hb_blob_set_user_data(BYVAL AS hb_blob_t PTR, BYVAL AS hb_user_data_key_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t, BYVAL AS hb_bool_t) AS hb_bool_t
DECLARE SUB hb_buffer_add(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS guint /'unsigned int'/)
DECLARE SUB hb_buffer_add_codepoints(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_codepoint_t PTR, BYVAL AS gint /'int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS gint /'int'/)
DECLARE SUB hb_buffer_add_latin1(BYVAL AS hb_buffer_t PTR, BYVAL AS guint8 /'uint8_t'/ PTR, BYVAL AS gint /'int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS gint /'int'/)
DECLARE SUB hb_buffer_add_utf16(BYVAL AS hb_buffer_t PTR, BYVAL AS guint16 /'uint16_t'/ PTR, BYVAL AS gint /'int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS gint /'int'/)
DECLARE SUB hb_buffer_add_utf32(BYVAL AS hb_buffer_t PTR, BYVAL AS guint32 /'uint32_t'/ PTR, BYVAL AS gint /'int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS gint /'int'/)
DECLARE SUB hb_buffer_add_utf8(BYVAL AS hb_buffer_t PTR, BYVAL AS char PTR, BYVAL AS gint /'int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS gint /'int'/)
DECLARE FUNCTION hb_buffer_allocation_successful(BYVAL AS hb_buffer_t PTR) AS hb_bool_t
DECLARE SUB hb_buffer_clear_contents(BYVAL AS hb_buffer_t PTR)
DECLARE FUNCTION hb_buffer_create() AS hb_buffer_t PTR
DECLARE FUNCTION hb_buffer_deserialize_glyphs(BYVAL AS hb_buffer_t PTR, BYVAL AS char PTR, BYVAL AS gint /'int'/, BYVAL AS const gchar /'const char'/ PTR PTR, BYVAL AS hb_font_t PTR, BYVAL AS hb_buffer_serialize_format_t) AS hb_bool_t
DECLARE SUB hb_buffer_destroy(BYVAL AS hb_buffer_t PTR)
DECLARE FUNCTION hb_buffer_get_cluster_level(BYVAL AS hb_buffer_t PTR) AS hb_buffer_cluster_level_t
DECLARE FUNCTION hb_buffer_get_content_type(BYVAL AS hb_buffer_t PTR) AS hb_buffer_content_type_t
DECLARE FUNCTION hb_buffer_get_direction(BYVAL AS hb_buffer_t PTR) AS hb_direction_t
DECLARE FUNCTION hb_buffer_get_empty() AS hb_buffer_t PTR
DECLARE FUNCTION hb_buffer_get_flags(BYVAL AS hb_buffer_t PTR) AS hb_buffer_flags_t
DECLARE FUNCTION hb_buffer_get_glyph_infos(BYVAL AS hb_buffer_t PTR, BYVAL AS guint /'unsigned int'/ PTR) AS hb_glyph_info_t PTR
DECLARE FUNCTION hb_buffer_get_glyph_positions(BYVAL AS hb_buffer_t PTR, BYVAL AS guint /'unsigned int'/ PTR) AS hb_glyph_position_t PTR
DECLARE FUNCTION hb_buffer_get_language(BYVAL AS hb_buffer_t PTR) AS hb_language_t ptr /'hb_language_t'/
DECLARE FUNCTION hb_buffer_get_length(BYVAL AS hb_buffer_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_buffer_get_replacement_codepoint(BYVAL AS hb_buffer_t PTR) AS hb_codepoint_t
DECLARE FUNCTION hb_buffer_get_script(BYVAL AS hb_buffer_t PTR) AS hb_script_t
DECLARE SUB hb_buffer_get_segment_properties(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_segment_properties_t PTR)
DECLARE FUNCTION hb_buffer_get_unicode_funcs(BYVAL AS hb_buffer_t PTR) AS hb_unicode_funcs_t PTR
DECLARE FUNCTION hb_buffer_get_user_data(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_user_data_key_t PTR) AS any /'void'/ PTR
DECLARE SUB hb_buffer_guess_segment_properties(BYVAL AS hb_buffer_t PTR)
DECLARE SUB hb_buffer_normalize_glyphs(BYVAL AS hb_buffer_t PTR)
DECLARE FUNCTION hb_buffer_pre_allocate(BYVAL AS hb_buffer_t PTR, BYVAL AS guint /'unsigned int'/) AS hb_bool_t
DECLARE FUNCTION hb_buffer_reference(BYVAL AS hb_buffer_t PTR) AS hb_buffer_t PTR
DECLARE SUB hb_buffer_reset(BYVAL AS hb_buffer_t PTR)
DECLARE SUB hb_buffer_reverse(BYVAL AS hb_buffer_t PTR)
DECLARE SUB hb_buffer_reverse_clusters(BYVAL AS hb_buffer_t PTR)
DECLARE SUB hb_buffer_reverse_range(BYVAL AS hb_buffer_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/)
DECLARE FUNCTION hb_buffer_serialize_format_from_string(BYVAL AS const gchar /'const char'/ PTR, BYVAL AS gint /'int'/) AS hb_buffer_serialize_format_t
DECLARE FUNCTION hb_buffer_serialize_format_to_string(BYVAL AS hb_buffer_serialize_format_t) AS const gchar /'const char'/ PTR
DECLARE FUNCTION hb_buffer_serialize_glyphs(BYVAL AS hb_buffer_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS char PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS hb_font_t PTR, BYVAL AS hb_buffer_serialize_format_t, BYVAL AS hb_buffer_serialize_flags_t) AS guint /'unsigned int'/
DECLARE FUNCTION hb_buffer_serialize_list_formats() AS const gchar /'const char'/ PTR PTR
DECLARE SUB hb_buffer_set_cluster_level(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_buffer_cluster_level_t)
DECLARE SUB hb_buffer_set_content_type(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_buffer_content_type_t)
DECLARE SUB hb_buffer_set_direction(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_direction_t)
DECLARE SUB hb_buffer_set_flags(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_buffer_flags_t)
DECLARE SUB hb_buffer_set_language(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_language_t ptr /'hb_language_t'/)
DECLARE FUNCTION hb_buffer_set_length(BYVAL AS hb_buffer_t PTR, BYVAL AS guint /'unsigned int'/) AS hb_bool_t
DECLARE SUB hb_buffer_set_replacement_codepoint(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_codepoint_t)
DECLARE SUB hb_buffer_set_script(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_script_t)
DECLARE SUB hb_buffer_set_segment_properties(BYVAL AS hb_buffer_t PTR, BYVAL AS const hb_segment_properties_t PTR)
DECLARE SUB hb_buffer_set_unicode_funcs(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_unicode_funcs_t PTR)
DECLARE FUNCTION hb_buffer_set_user_data(BYVAL AS hb_buffer_t PTR, BYVAL AS hb_user_data_key_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t, BYVAL AS hb_bool_t) AS hb_bool_t
DECLARE FUNCTION hb_direction_from_string(BYVAL AS char PTR, BYVAL AS gint /'int'/) AS hb_direction_t
DECLARE FUNCTION hb_direction_to_string(BYVAL AS hb_direction_t) AS const gchar /'const char'/ PTR
DECLARE FUNCTION hb_face_create(BYVAL AS hb_blob_t PTR, BYVAL AS guint /'unsigned int'/) AS hb_face_t PTR
DECLARE FUNCTION hb_face_create_for_tables(BYVAL AS hb_reference_table_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t) AS hb_face_t PTR
DECLARE SUB hb_face_destroy(BYVAL AS hb_face_t PTR)
DECLARE FUNCTION hb_face_get_empty() AS hb_face_t PTR
DECLARE FUNCTION hb_face_get_glyph_count(BYVAL AS hb_face_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_face_get_index(BYVAL AS hb_face_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_face_get_upem(BYVAL AS hb_face_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_face_get_user_data(BYVAL AS hb_face_t PTR, BYVAL AS hb_user_data_key_t PTR) AS any /'void'/ PTR
DECLARE FUNCTION hb_face_is_immutable(BYVAL AS hb_face_t PTR) AS hb_bool_t
DECLARE SUB hb_face_make_immutable(BYVAL AS hb_face_t PTR)
DECLARE FUNCTION hb_face_reference(BYVAL AS hb_face_t PTR) AS hb_face_t PTR
DECLARE FUNCTION hb_face_reference_blob(BYVAL AS hb_face_t PTR) AS hb_blob_t PTR
DECLARE FUNCTION hb_face_reference_table(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t) AS hb_blob_t PTR
DECLARE SUB hb_face_set_glyph_count(BYVAL AS hb_face_t PTR, BYVAL AS guint /'unsigned int'/)
DECLARE SUB hb_face_set_index(BYVAL AS hb_face_t PTR, BYVAL AS guint /'unsigned int'/)
DECLARE SUB hb_face_set_upem(BYVAL AS hb_face_t PTR, BYVAL AS guint /'unsigned int'/)
DECLARE FUNCTION hb_face_set_user_data(BYVAL AS hb_face_t PTR, BYVAL AS hb_user_data_key_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t, BYVAL AS hb_bool_t) AS hb_bool_t
DECLARE FUNCTION hb_feature_from_string(BYVAL AS char PTR, BYVAL AS gint /'int'/, BYVAL AS hb_feature_t PTR) AS hb_bool_t
DECLARE SUB hb_font_add_glyph_origin_for_direction(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_direction_t, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR)
DECLARE FUNCTION hb_font_create(BYVAL AS hb_face_t PTR) AS hb_font_t PTR
DECLARE FUNCTION hb_font_create_sub_font(BYVAL AS hb_font_t PTR) AS hb_font_t PTR
DECLARE SUB hb_font_destroy(BYVAL AS hb_font_t PTR)
DECLARE FUNCTION hb_font_funcs_create() AS hb_font_funcs_t PTR
DECLARE SUB hb_font_funcs_destroy(BYVAL AS hb_font_funcs_t PTR)
DECLARE FUNCTION hb_font_funcs_get_empty() AS hb_font_funcs_t PTR
DECLARE FUNCTION hb_font_funcs_get_user_data(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_user_data_key_t PTR) AS any /'void'/ PTR
DECLARE FUNCTION hb_font_funcs_is_immutable(BYVAL AS hb_font_funcs_t PTR) AS hb_bool_t
DECLARE SUB hb_font_funcs_make_immutable(BYVAL AS hb_font_funcs_t PTR)
DECLARE FUNCTION hb_font_funcs_reference(BYVAL AS hb_font_funcs_t PTR) AS hb_font_funcs_t PTR
DECLARE SUB hb_font_funcs_set_glyph_contour_point_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_contour_point_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_extents_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_extents_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_from_name_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_from_name_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_h_advance_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_h_advance_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_h_kerning_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_h_kerning_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_h_origin_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_h_origin_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_name_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_name_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_v_advance_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_v_advance_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_v_kerning_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_v_kerning_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_funcs_set_glyph_v_origin_func(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_font_get_glyph_v_origin_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE FUNCTION hb_font_funcs_set_user_data(BYVAL AS hb_font_funcs_t PTR, BYVAL AS hb_user_data_key_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t, BYVAL AS hb_bool_t) AS hb_bool_t
DECLARE FUNCTION hb_font_get_empty() AS hb_font_t PTR
DECLARE FUNCTION hb_font_get_face(BYVAL AS hb_font_t PTR) AS hb_face_t PTR
DECLARE FUNCTION hb_font_get_glyph(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t PTR) AS hb_bool_t
DECLARE SUB hb_font_get_glyph_advance_for_direction(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_direction_t, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR)
DECLARE FUNCTION hb_font_get_glyph_contour_point(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_font_get_glyph_contour_point_for_origin(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_direction_t, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_font_get_glyph_extents(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_glyph_extents_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_font_get_glyph_extents_for_origin(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_direction_t, BYVAL AS hb_glyph_extents_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_font_get_glyph_from_name(BYVAL AS hb_font_t PTR, BYVAL AS char PTR, BYVAL AS gint /'int'/, BYVAL AS hb_codepoint_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_font_get_glyph_h_advance(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t) AS hb_position_t
DECLARE FUNCTION hb_font_get_glyph_h_kerning(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t) AS hb_position_t
DECLARE FUNCTION hb_font_get_glyph_h_origin(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR) AS hb_bool_t
DECLARE SUB hb_font_get_glyph_kerning_for_direction(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t, BYVAL AS hb_direction_t, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR)
DECLARE FUNCTION hb_font_get_glyph_name(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS char PTR, BYVAL AS guint /'unsigned int'/) AS hb_bool_t
DECLARE SUB hb_font_get_glyph_origin_for_direction(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_direction_t, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR)
DECLARE FUNCTION hb_font_get_glyph_v_advance(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t) AS hb_position_t
DECLARE FUNCTION hb_font_get_glyph_v_kerning(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t) AS hb_position_t
DECLARE FUNCTION hb_font_get_glyph_v_origin(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_font_get_parent(BYVAL AS hb_font_t PTR) AS hb_font_t PTR
DECLARE SUB hb_font_get_ppem(BYVAL AS hb_font_t PTR, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR)
DECLARE SUB hb_font_get_scale(BYVAL AS hb_font_t PTR, BYVAL AS gint /'int'/ PTR, BYVAL AS gint /'int'/ PTR)
DECLARE FUNCTION hb_font_get_user_data(BYVAL AS hb_font_t PTR, BYVAL AS hb_user_data_key_t PTR) AS any /'void'/ PTR
DECLARE FUNCTION hb_font_glyph_from_string(BYVAL AS hb_font_t PTR, BYVAL AS char PTR, BYVAL AS gint /'int'/, BYVAL AS hb_codepoint_t PTR) AS hb_bool_t
DECLARE SUB hb_font_glyph_to_string(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS char PTR, BYVAL AS guint /'unsigned int'/)
DECLARE FUNCTION hb_font_is_immutable(BYVAL AS hb_font_t PTR) AS hb_bool_t
DECLARE SUB hb_font_make_immutable(BYVAL AS hb_font_t PTR)
DECLARE FUNCTION hb_font_reference(BYVAL AS hb_font_t PTR) AS hb_font_t PTR
DECLARE SUB hb_font_set_funcs(BYVAL AS hb_font_t PTR, BYVAL AS hb_font_funcs_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_set_funcs_data(BYVAL AS hb_font_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_font_set_ppem(BYVAL AS hb_font_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/)
DECLARE SUB hb_font_set_scale(BYVAL AS hb_font_t PTR, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/)
DECLARE FUNCTION hb_font_set_user_data(BYVAL AS hb_font_t PTR, BYVAL AS hb_user_data_key_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t, BYVAL AS hb_bool_t) AS hb_bool_t
DECLARE SUB hb_font_subtract_glyph_origin_for_direction(BYVAL AS hb_font_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_direction_t, BYVAL AS hb_position_t PTR, BYVAL AS hb_position_t PTR)
DECLARE FUNCTION hb_ft_face_create(BYVAL AS any ptr /'FT_Face'/, BYVAL AS hb_destroy_func_t) AS hb_face_t PTR
DECLARE FUNCTION hb_ft_face_create_cached(BYVAL AS any ptr /'FT_Face'/) AS hb_face_t PTR
DECLARE FUNCTION hb_ft_face_create_referenced(BYVAL AS any ptr /'FT_Face'/) AS hb_face_t PTR
DECLARE FUNCTION hb_ft_font_create(BYVAL AS any ptr /'FT_Face'/, BYVAL AS hb_destroy_func_t) AS hb_font_t PTR
DECLARE FUNCTION hb_ft_font_create_referenced(BYVAL AS any ptr /'FT_Face'/) AS hb_font_t PTR
DECLARE FUNCTION hb_ft_font_get_face(BYVAL AS hb_font_t PTR) AS any ptr /'FT_Face'/
DECLARE SUB hb_ft_font_set_funcs(BYVAL AS hb_font_t PTR)
DECLARE FUNCTION hb_glib_blob_create(BYVAL AS GBytes PTR) AS hb_blob_t PTR
DECLARE FUNCTION hb_glib_get_unicode_funcs() AS hb_unicode_funcs_t PTR
DECLARE FUNCTION hb_glib_script_from_script(BYVAL AS hb_script_t) AS GUnicodeScript
DECLARE FUNCTION hb_glib_script_to_script(BYVAL AS GUnicodeScript) AS hb_script_t
DECLARE FUNCTION hb_graphite2_face_get_gr_face(BYVAL AS hb_face_t PTR) AS any ptr /'gr_face'/ PTR
DECLARE FUNCTION hb_graphite2_font_get_gr_font(BYVAL AS hb_font_t PTR) AS any ptr /'gr_font'/ PTR
DECLARE FUNCTION hb_language_from_string(BYVAL AS char PTR, BYVAL AS gint /'int'/) AS hb_language_t ptr /'hb_language_t'/
DECLARE FUNCTION hb_language_get_default() AS hb_language_t ptr /'hb_language_t'/
DECLARE SUB hb_ot_font_set_funcs(BYVAL AS hb_font_t PTR)
DECLARE SUB hb_ot_layout_collect_lookups(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS const hb_tag_t PTR, BYVAL AS const hb_tag_t PTR, BYVAL AS const hb_tag_t PTR, BYVAL AS hb_set_t PTR)
DECLARE FUNCTION hb_ot_layout_feature_get_lookups(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_ot_layout_get_attach_points(BYVAL AS hb_face_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_ot_layout_get_glyph_class(BYVAL AS hb_face_t PTR, BYVAL AS hb_codepoint_t) AS hb_ot_layout_glyph_class_t
DECLARE SUB hb_ot_layout_get_glyphs_in_class(BYVAL AS hb_face_t PTR, BYVAL AS hb_ot_layout_glyph_class_t, BYVAL AS hb_set_t PTR)
DECLARE FUNCTION hb_ot_layout_get_ligature_carets(BYVAL AS hb_font_t PTR, BYVAL AS hb_direction_t, BYVAL AS hb_codepoint_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS hb_position_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_ot_layout_get_size_params(BYVAL AS hb_face_t PTR, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_has_glyph_classes(BYVAL AS hb_face_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_has_positioning(BYVAL AS hb_face_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_has_substitution(BYVAL AS hb_face_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_language_find_feature(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/ PTR) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_language_get_feature_indexes(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_ot_layout_language_get_feature_tags(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS hb_tag_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_ot_layout_language_get_required_feature(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS hb_tag_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_language_get_required_feature_index(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR) AS hb_bool_t
DECLARE SUB hb_ot_layout_lookup_collect_glyphs(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_set_t PTR, BYVAL AS hb_set_t PTR, BYVAL AS hb_set_t PTR, BYVAL AS hb_set_t PTR)
DECLARE SUB hb_ot_layout_lookup_substitute_closure(BYVAL AS hb_face_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_set_t PTR)
DECLARE FUNCTION hb_ot_layout_lookup_would_substitute(BYVAL AS hb_face_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS const hb_codepoint_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_bool_t) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_script_find_language(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/ PTR) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_script_get_language_tags(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS hb_tag_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_ot_layout_table_choose_script(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS const hb_tag_t PTR, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS hb_tag_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_table_find_script(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/ PTR) AS hb_bool_t
DECLARE FUNCTION hb_ot_layout_table_get_feature_tags(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS hb_tag_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_ot_layout_table_get_lookup_count(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t) AS guint /'unsigned int'/
DECLARE FUNCTION hb_ot_layout_table_get_script_tags(BYVAL AS hb_face_t PTR, BYVAL AS hb_tag_t, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS hb_tag_t PTR) AS guint /'unsigned int'/
DECLARE SUB hb_ot_shape_glyphs_closure(BYVAL AS hb_font_t PTR, BYVAL AS hb_buffer_t PTR, BYVAL AS const hb_feature_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS hb_set_t PTR)
DECLARE SUB hb_ot_shape_plan_collect_lookups(BYVAL AS hb_shape_plan_t PTR, BYVAL AS hb_tag_t, BYVAL AS hb_set_t PTR)
DECLARE FUNCTION hb_ot_tag_from_language(BYVAL AS hb_language_t ptr /'hb_language_t'/) AS hb_tag_t
DECLARE FUNCTION hb_ot_tag_to_language(BYVAL AS hb_tag_t) AS hb_language_t ptr /'hb_language_t'/
DECLARE FUNCTION hb_ot_tag_to_script(BYVAL AS hb_tag_t) AS hb_script_t
DECLARE SUB hb_ot_tags_from_script(BYVAL AS hb_script_t, BYVAL AS hb_tag_t PTR, BYVAL AS hb_tag_t PTR)
DECLARE FUNCTION hb_script_from_iso15924_tag(BYVAL AS hb_tag_t) AS hb_script_t
DECLARE FUNCTION hb_script_from_string(BYVAL AS char PTR, BYVAL AS gint /'int'/) AS hb_script_t
DECLARE FUNCTION hb_script_get_horizontal_direction(BYVAL AS hb_script_t) AS hb_direction_t
DECLARE FUNCTION hb_script_to_iso15924_tag(BYVAL AS hb_script_t) AS hb_tag_t
DECLARE FUNCTION hb_segment_properties_equal(BYVAL AS const hb_segment_properties_t PTR, BYVAL AS const hb_segment_properties_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_segment_properties_hash(BYVAL AS const hb_segment_properties_t PTR) AS guint /'unsigned int'/
DECLARE SUB hb_set_add(BYVAL AS hb_set_t PTR, BYVAL AS hb_codepoint_t)
DECLARE SUB hb_set_add_range(BYVAL AS hb_set_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t)
DECLARE FUNCTION hb_set_allocation_successful(BYVAL AS const hb_set_t PTR) AS hb_bool_t
DECLARE SUB hb_set_clear(BYVAL AS hb_set_t PTR)
DECLARE FUNCTION hb_set_create() AS hb_set_t PTR
DECLARE SUB hb_set_del(BYVAL AS hb_set_t PTR, BYVAL AS hb_codepoint_t)
DECLARE SUB hb_set_del_range(BYVAL AS hb_set_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t)
DECLARE SUB hb_set_destroy(BYVAL AS hb_set_t PTR)
DECLARE FUNCTION hb_set_get_empty() AS hb_set_t PTR
DECLARE FUNCTION hb_set_get_max(BYVAL AS const hb_set_t PTR) AS hb_codepoint_t
DECLARE FUNCTION hb_set_get_min(BYVAL AS const hb_set_t PTR) AS hb_codepoint_t
DECLARE FUNCTION hb_set_get_population(BYVAL AS const hb_set_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_set_get_user_data(BYVAL AS hb_set_t PTR, BYVAL AS hb_user_data_key_t PTR) AS any /'void'/ PTR
DECLARE FUNCTION hb_set_has(BYVAL AS const hb_set_t PTR, BYVAL AS hb_codepoint_t) AS hb_bool_t
DECLARE SUB hb_set_intersect(BYVAL AS hb_set_t PTR, BYVAL AS const hb_set_t PTR)
DECLARE SUB hb_set_invert(BYVAL AS hb_set_t PTR)
DECLARE FUNCTION hb_set_is_empty(BYVAL AS const hb_set_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_set_is_equal(BYVAL AS const hb_set_t PTR, BYVAL AS const hb_set_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_set_next(BYVAL AS const hb_set_t PTR, BYVAL AS hb_codepoint_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_set_next_range(BYVAL AS const hb_set_t PTR, BYVAL AS hb_codepoint_t PTR, BYVAL AS hb_codepoint_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_set_reference(BYVAL AS hb_set_t PTR) AS hb_set_t PTR
DECLARE SUB hb_set_set(BYVAL AS hb_set_t PTR, BYVAL AS const hb_set_t PTR)
DECLARE FUNCTION hb_set_set_user_data(BYVAL AS hb_set_t PTR, BYVAL AS hb_user_data_key_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t, BYVAL AS hb_bool_t) AS hb_bool_t
DECLARE SUB hb_set_subtract(BYVAL AS hb_set_t PTR, BYVAL AS const hb_set_t PTR)
DECLARE SUB hb_set_symmetric_difference(BYVAL AS hb_set_t PTR, BYVAL AS const hb_set_t PTR)
DECLARE SUB hb_set_union(BYVAL AS hb_set_t PTR, BYVAL AS const hb_set_t PTR)
DECLARE SUB hb_shape(BYVAL AS hb_font_t PTR, BYVAL AS hb_buffer_t PTR, BYVAL AS hb_feature_t PTR, BYVAL AS guint /'unsigned int'/)
DECLARE FUNCTION hb_shape_full(BYVAL AS hb_font_t PTR, BYVAL AS hb_buffer_t PTR, BYVAL AS hb_feature_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS char PTR PTR) AS hb_bool_t
DECLARE FUNCTION hb_shape_list_shapers() AS char PTR PTR
DECLARE FUNCTION hb_shape_plan_create(BYVAL AS hb_face_t PTR, BYVAL AS const hb_segment_properties_t PTR, BYVAL AS hb_feature_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS char PTR PTR) AS hb_shape_plan_t PTR
DECLARE FUNCTION hb_shape_plan_create_cached(BYVAL AS hb_face_t PTR, BYVAL AS const hb_segment_properties_t PTR, BYVAL AS hb_feature_t PTR, BYVAL AS guint /'unsigned int'/, BYVAL AS char PTR PTR) AS hb_shape_plan_t PTR
DECLARE SUB hb_shape_plan_destroy(BYVAL AS hb_shape_plan_t PTR)
DECLARE FUNCTION hb_shape_plan_execute(BYVAL AS hb_shape_plan_t PTR, BYVAL AS hb_font_t PTR, BYVAL AS hb_buffer_t PTR, BYVAL AS hb_feature_t PTR, BYVAL AS guint /'unsigned int'/) AS hb_bool_t
DECLARE FUNCTION hb_shape_plan_get_empty() AS hb_shape_plan_t PTR
DECLARE FUNCTION hb_shape_plan_get_shaper(BYVAL AS hb_shape_plan_t PTR) AS const gchar /'const char'/ PTR
DECLARE FUNCTION hb_shape_plan_get_user_data(BYVAL AS hb_shape_plan_t PTR, BYVAL AS hb_user_data_key_t PTR) AS any /'void'/ PTR
DECLARE FUNCTION hb_shape_plan_reference(BYVAL AS hb_shape_plan_t PTR) AS hb_shape_plan_t PTR
DECLARE FUNCTION hb_shape_plan_set_user_data(BYVAL AS hb_shape_plan_t PTR, BYVAL AS hb_user_data_key_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t, BYVAL AS hb_bool_t) AS hb_bool_t
DECLARE FUNCTION hb_tag_from_string(BYVAL AS char PTR, BYVAL AS gint /'int'/) AS hb_tag_t
DECLARE SUB hb_tag_to_string(BYVAL AS hb_tag_t, BYVAL AS char PTR)
DECLARE FUNCTION hb_unicode_combining_class(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t) AS hb_unicode_combining_class_t
DECLARE FUNCTION hb_unicode_compose(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_unicode_decompose(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t PTR, BYVAL AS hb_codepoint_t PTR) AS hb_bool_t
DECLARE FUNCTION hb_unicode_decompose_compatibility(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t, BYVAL AS hb_codepoint_t PTR) AS guint /'unsigned int'/
DECLARE FUNCTION hb_unicode_eastasian_width(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t) AS guint /'unsigned int'/
DECLARE FUNCTION hb_unicode_funcs_create(BYVAL AS hb_unicode_funcs_t PTR) AS hb_unicode_funcs_t PTR
DECLARE SUB hb_unicode_funcs_destroy(BYVAL AS hb_unicode_funcs_t PTR)
DECLARE FUNCTION hb_unicode_funcs_get_default() AS hb_unicode_funcs_t PTR
DECLARE FUNCTION hb_unicode_funcs_get_empty() AS hb_unicode_funcs_t PTR
DECLARE FUNCTION hb_unicode_funcs_get_parent(BYVAL AS hb_unicode_funcs_t PTR) AS hb_unicode_funcs_t PTR
DECLARE FUNCTION hb_unicode_funcs_get_user_data(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_user_data_key_t PTR) AS any /'void'/ PTR
DECLARE FUNCTION hb_unicode_funcs_is_immutable(BYVAL AS hb_unicode_funcs_t PTR) AS hb_bool_t
DECLARE SUB hb_unicode_funcs_make_immutable(BYVAL AS hb_unicode_funcs_t PTR)
DECLARE FUNCTION hb_unicode_funcs_reference(BYVAL AS hb_unicode_funcs_t PTR) AS hb_unicode_funcs_t PTR
DECLARE SUB hb_unicode_funcs_set_combining_class_func(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_unicode_combining_class_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_unicode_funcs_set_compose_func(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_unicode_compose_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_unicode_funcs_set_decompose_compatibility_func(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_unicode_decompose_compatibility_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_unicode_funcs_set_decompose_func(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_unicode_decompose_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_unicode_funcs_set_eastasian_width_func(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_unicode_eastasian_width_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_unicode_funcs_set_general_category_func(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_unicode_general_category_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_unicode_funcs_set_mirroring_func(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_unicode_mirroring_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE SUB hb_unicode_funcs_set_script_func(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_unicode_script_func_t, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t)
DECLARE FUNCTION hb_unicode_funcs_set_user_data(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_user_data_key_t PTR, BYVAL AS any /'void'/ PTR, BYVAL AS hb_destroy_func_t, BYVAL AS hb_bool_t) AS hb_bool_t
DECLARE FUNCTION hb_unicode_general_category(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t) AS hb_unicode_general_category_t
DECLARE FUNCTION hb_unicode_mirroring(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t) AS hb_codepoint_t
DECLARE FUNCTION hb_unicode_script(BYVAL AS hb_unicode_funcs_t PTR, BYVAL AS hb_codepoint_t) AS hb_script_t
DECLARE SUB hb_version(BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR, BYVAL AS guint /'unsigned int'/ PTR)
DECLARE FUNCTION hb_version_atleast(BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/) AS hb_bool_t
DECLARE FUNCTION hb_version_check(BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/, BYVAL AS guint /'unsigned int'/) AS hb_bool_t
DECLARE FUNCTION hb_version_string_ ALIAS "hb_version_string"() AS const gchar /'const char'/ PTR
END EXTERN

