'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2020 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/Gee-0.8.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"

  TYPE AS _GeeHazardPointerContext GeeHazardPointerContext
'typedef gpointer (*GeeFutureMapFunc) (gconstpointer value, void* user_data);
'typedef gconstpointer (*GeeFutureLightMapFunc) (gconstpointer value, void* user_data);
'typedef gpointer (*GeeFutureZipFunc) (gconstpointer a, gconstpointer b, void* user_data);
'typedef GeeFuture* (*GeeFutureFlatMapFunc) (gconstpointer value, void* user_data);

' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
#INCLUDE ONCE "GLib-2.0.bi"
#INCLUDE ONCE "Gio-2.0.bi"
TYPE AS LONG GeeFutureError
ENUM
  GEE_FUTURE_ERROR_ABANDON_PROMISE = 0
  GEE_FUTURE_ERROR_EXCEPTION = 1
END ENUM
TYPE AS _GeeAbstractBidirList GeeAbstractBidirList
TYPE AS _GeeAbstractBidirListClass GeeAbstractBidirListClass
TYPE AS _GeeAbstractBidirListPrivate GeeAbstractBidirListPrivate
TYPE AS _GeeAbstractBidirSortedSet GeeAbstractBidirSortedSet
TYPE AS _GeeAbstractBidirSortedSetClass GeeAbstractBidirSortedSetClass
TYPE AS _GeeAbstractBidirSortedSetPrivate GeeAbstractBidirSortedSetPrivate
TYPE AS _GeeAbstractBidirSortedMap GeeAbstractBidirSortedMap
TYPE AS _GeeAbstractBidirSortedMapClass GeeAbstractBidirSortedMapClass
TYPE AS _GeeAbstractBidirSortedMapPrivate GeeAbstractBidirSortedMapPrivate
TYPE AS _GeeAbstractCollection GeeAbstractCollection
TYPE AS _GeeAbstractCollectionClass GeeAbstractCollectionClass
TYPE AS _GeeAbstractCollectionPrivate GeeAbstractCollectionPrivate
TYPE AS _GeeAbstractList GeeAbstractList
TYPE AS _GeeAbstractListClass GeeAbstractListClass
TYPE AS _GeeAbstractListPrivate GeeAbstractListPrivate
TYPE AS _GeeAbstractMap GeeAbstractMap
TYPE AS _GeeAbstractMapClass GeeAbstractMapClass
TYPE AS _GeeAbstractMapPrivate GeeAbstractMapPrivate
TYPE AS _GeeAbstractMultiMap GeeAbstractMultiMap
TYPE AS _GeeAbstractMultiMapClass GeeAbstractMultiMapClass
TYPE AS _GeeAbstractMultiMapPrivate GeeAbstractMultiMapPrivate
TYPE AS _GeeAbstractMultiSet GeeAbstractMultiSet
TYPE AS _GeeAbstractMultiSetClass GeeAbstractMultiSetClass
TYPE AS _GeeAbstractMultiSetPrivate GeeAbstractMultiSetPrivate
TYPE AS _GeeAbstractQueue GeeAbstractQueue
TYPE AS _GeeAbstractQueueClass GeeAbstractQueueClass
TYPE AS _GeeAbstractQueuePrivate GeeAbstractQueuePrivate
TYPE AS _GeeAbstractSet GeeAbstractSet
TYPE AS _GeeAbstractSetClass GeeAbstractSetClass
TYPE AS _GeeAbstractSetPrivate GeeAbstractSetPrivate
TYPE AS _GeeAbstractSortedMap GeeAbstractSortedMap
TYPE AS _GeeAbstractSortedMapClass GeeAbstractSortedMapClass
TYPE AS _GeeAbstractSortedMapPrivate GeeAbstractSortedMapPrivate
TYPE AS _GeeAbstractSortedSet GeeAbstractSortedSet
TYPE AS _GeeAbstractSortedSetClass GeeAbstractSortedSetClass
TYPE AS _GeeAbstractSortedSetPrivate GeeAbstractSortedSetPrivate
TYPE AS _GeeArrayList GeeArrayList
TYPE AS _GeeArrayListClass GeeArrayListClass
TYPE AS _GeeArrayListPrivate GeeArrayListPrivate
TYPE AS _GeeArrayQueue GeeArrayQueue
TYPE AS _GeeArrayQueueClass GeeArrayQueueClass
TYPE AS _GeeArrayQueuePrivate GeeArrayQueuePrivate
TYPE AS _GeeConcurrentList GeeConcurrentList
TYPE AS _GeeConcurrentListClass GeeConcurrentListClass
TYPE AS _GeeConcurrentListPrivate GeeConcurrentListPrivate
TYPE AS _GeeConcurrentSet GeeConcurrentSet
TYPE AS _GeeConcurrentSetClass GeeConcurrentSetClass
TYPE AS _GeeConcurrentSetPrivate GeeConcurrentSetPrivate
TYPE AS LONG GeeConcurrentSetRangeType
ENUM
  GEE_CONCURRENT_SET_RANGE_TYPE_HEAD = 0
  GEE_CONCURRENT_SET_RANGE_TYPE_TAIL = 1
  GEE_CONCURRENT_SET_RANGE_TYPE_BOUNDED = 2
  GEE_CONCURRENT_SET_RANGE_TYPE_EMPTY = 3
END ENUM
TYPE AS _GeeHashMap GeeHashMap
TYPE AS _GeeHashMapClass GeeHashMapClass
TYPE AS _GeeHashMapPrivate GeeHashMapPrivate
TYPE AS _GeeHashMultiMap GeeHashMultiMap
TYPE AS _GeeHashMultiMapClass GeeHashMultiMapClass
TYPE AS _GeeHashMultiMapPrivate GeeHashMultiMapPrivate
TYPE AS _GeeHashMultiSet GeeHashMultiSet
TYPE AS _GeeHashMultiSetClass GeeHashMultiSetClass
TYPE AS _GeeHashMultiSetPrivate GeeHashMultiSetPrivate
TYPE AS _GeeHashSet GeeHashSet
TYPE AS _GeeHashSetClass GeeHashSetClass
TYPE AS _GeeHashSetPrivate GeeHashSetPrivate
TYPE AS LONG GeeHazardPointerPolicy
ENUM
  GEE_HAZARD_POINTER_POLICY_DEFAULT = 0
  GEE_HAZARD_POINTER_POLICY_THREAD_EXIT = 1
  GEE_HAZARD_POINTER_POLICY_TRY_FREE = 2
  GEE_HAZARD_POINTER_POLICY_FREE = 3
  GEE_HAZARD_POINTER_POLICY_TRY_RELEASE = 4
  GEE_HAZARD_POINTER_POLICY_RELEASE = 5
END ENUM
TYPE AS LONG GeeHazardPointerReleasePolicy
ENUM
  GEE_HAZARD_POINTER_RELEASE_POLICY_HELPER_THREAD = 0
  GEE_HAZARD_POINTER_RELEASE_POLICY_MAIN_LOOP = 1
END ENUM
TYPE AS _GeeLazy GeeLazy
TYPE AS _GeeLazyClass GeeLazyClass
TYPE AS _GeeLazyPrivate GeeLazyPrivate
TYPE AS _GeeLinkedList GeeLinkedList
TYPE AS _GeeLinkedListClass GeeLinkedListClass
TYPE AS _GeeLinkedListPrivate GeeLinkedListPrivate
TYPE AS _GeePriorityQueue GeePriorityQueue
TYPE AS _GeePriorityQueueClass GeePriorityQueueClass
TYPE AS _GeePriorityQueuePrivate GeePriorityQueuePrivate
TYPE AS _GeePromise GeePromise
TYPE AS _GeePromiseClass GeePromiseClass
TYPE AS _GeePromisePrivate GeePromisePrivate
TYPE AS _GeeTreeMap GeeTreeMap
TYPE AS _GeeTreeMapClass GeeTreeMapClass
TYPE AS _GeeTreeMapPrivate GeeTreeMapPrivate
TYPE AS _GeeTreeMultiMap GeeTreeMultiMap
TYPE AS _GeeTreeMultiMapClass GeeTreeMultiMapClass
TYPE AS _GeeTreeMultiMapPrivate GeeTreeMultiMapPrivate
TYPE AS _GeeTreeMultiSet GeeTreeMultiSet
TYPE AS _GeeTreeMultiSetClass GeeTreeMultiSetClass
TYPE AS _GeeTreeMultiSetPrivate GeeTreeMultiSetPrivate
TYPE AS _GeeTreeSet GeeTreeSet
TYPE AS _GeeTreeSetClass GeeTreeSetClass
TYPE AS _GeeTreeSetPrivate GeeTreeSetPrivate
TYPE AS _GeeUnrolledLinkedList GeeUnrolledLinkedList
TYPE AS _GeeUnrolledLinkedListClass GeeUnrolledLinkedListClass
TYPE AS _GeeUnrolledLinkedListPrivate GeeUnrolledLinkedListPrivate
TYPE AS _GeeBidirIterator GeeBidirIterator
TYPE AS _GeeBidirIteratorIface GeeBidirIteratorIface
TYPE AS _GeeBidirList GeeBidirList
TYPE AS _GeeBidirListIface GeeBidirListIface
TYPE AS _GeeBidirListIterator GeeBidirListIterator
TYPE AS _GeeBidirListIteratorIface GeeBidirListIteratorIface
TYPE AS _GeeBidirMapIterator GeeBidirMapIterator
TYPE AS _GeeBidirMapIteratorIface GeeBidirMapIteratorIface
TYPE AS _GeeBidirSortedSet GeeBidirSortedSet
TYPE AS _GeeBidirSortedSetIface GeeBidirSortedSetIface
TYPE AS _GeeBidirSortedMap GeeBidirSortedMap
TYPE AS _GeeBidirSortedMapIface GeeBidirSortedMapIface
TYPE AS _GeeCollection GeeCollection
TYPE AS _GeeCollectionIface GeeCollectionIface
TYPE AS _GeeComparable GeeComparable
TYPE AS _GeeComparableIface GeeComparableIface
TYPE AS _GeeDeque GeeDeque
TYPE AS _GeeDequeIface GeeDequeIface
TYPE AS _GeeFuture GeeFuture
TYPE AS _GeeFutureIface GeeFutureIface
TYPE AS _GeeHashable GeeHashable
TYPE AS _GeeHashableIface GeeHashableIface
TYPE AS _GeeIterable GeeIterable
TYPE AS _GeeIterableIface GeeIterableIface
TYPE AS _GeeIterator GeeIterator
TYPE AS _GeeIteratorIface GeeIteratorIface
TYPE AS _GeeList GeeList
TYPE AS _GeeListIface GeeListIface
TYPE AS _GeeListIterator GeeListIterator
TYPE AS _GeeListIteratorIface GeeListIteratorIface
TYPE AS _GeeMap GeeMap
TYPE AS _GeeMapIface GeeMapIface
TYPE AS _GeeMapEntry GeeMapEntry
TYPE AS _GeeMapEntryClass GeeMapEntryClass
TYPE AS _GeeMapEntryPrivate GeeMapEntryPrivate
TYPE AS _GeeMapIterator GeeMapIterator
TYPE AS _GeeMapIteratorIface GeeMapIteratorIface
TYPE AS _GeeMultiMap GeeMultiMap
TYPE AS _GeeMultiMapIface GeeMultiMapIface
TYPE AS _GeeMultiSet GeeMultiSet
TYPE AS _GeeMultiSetIface GeeMultiSetIface
TYPE AS _GeeQueue GeeQueue
#DEFINE GEE_QUEUE_UNBOUNDED_CAPACITY -1
TYPE AS _GeeQueueIface GeeQueueIface
TYPE AS _GeeSet GeeSet
TYPE AS _GeeSetIface GeeSetIface
TYPE AS _GeeSortedMap GeeSortedMap
TYPE AS _GeeSortedMapIface GeeSortedMapIface
TYPE AS _GeeSortedSet GeeSortedSet
TYPE AS _GeeSortedSetIface GeeSortedSetIface
TYPE AS _GeeTraversable GeeTraversable
TYPE AS _GeeTraversableIface GeeTraversableIface
TYPE AS LONG GeeTraversableStream
ENUM
  GEE_TRAVERSABLE_STREAM_YIELD = 0
  GEE_TRAVERSABLE_STREAM_CONTINUE = 1
  GEE_TRAVERSABLE_STREAM_END = 2
  GEE_TRAVERSABLE_STREAM_WAIT = 3
END ENUM
EXTERN "C"
' P_X

TYPE GeeForallFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS gboolean
TYPE GeeStreamFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeTraversableStream, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS GeeTraversableStream
TYPE GeeEqualDataFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS gboolean
TYPE GeeHashDataFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS guint
TYPE GeeLazyFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS any /'void'/ PTR) AS gpointer
TYPE _GeeAbstractCollection
  AS GObject parent_instance
  AS GeeAbstractCollectionPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_collection_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_COLLECTION (gee_abstract_collection_get_type())
#DEFINE GEE_ABSTRACT_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_COLLECTION, GeeAbstractCollection))
#DEFINE GEE_ABSTRACT_COLLECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_COLLECTION, GeeAbstractCollectionClass))
#DEFINE GEE_IS_ABSTRACT_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_COLLECTION))
#DEFINE GEE_IS_CLASS_ABSTRACT_COLLECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_COLLECTION))
#DEFINE GEE_ABSTRACT_COLLECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_COLLECTION, GeeAbstractCollectionClass))
DECLARE FUNCTION gee_abstract_collection_contains(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_abstract_collection_add(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_abstract_collection_remove(BYVAL AS gpointer) AS gboolean
DECLARE SUB gee_abstract_collection_clear()
DECLARE FUNCTION gee_abstract_collection_iterator() AS gpointer
DECLARE FUNCTION gee_abstract_collection_foreach(BYVAL AS GeeForallFunc, BYVAL AS any /'void'/ PTR) AS gboolean
DECLARE FUNCTION gee_abstract_collection_get_size() AS gint
DECLARE FUNCTION gee_abstract_collection_get_read_only() AS gboolean
DECLARE FUNCTION gee_abstract_collection_get_read_only_view() AS gpointer
TYPE _GeeAbstractCollectionClass
  AS GObjectClass parent_class
  contains AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  add AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  remove AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  clear AS SUB CDECL(BYVAL AS gpointer)
  iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  foreach AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GeeForallFunc, BYVAL AS any /'void'/ PTR) AS gboolean
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractList
  AS GeeAbstractCollection parent_instance
  AS GeeAbstractListPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_list_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_LIST (gee_abstract_list_get_type())
#DEFINE GEE_ABSTRACT_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_LIST, GeeAbstractList))
#DEFINE GEE_ABSTRACT_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_LIST, GeeAbstractListClass))
#DEFINE GEE_IS_ABSTRACT_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_LIST))
#DEFINE GEE_IS_CLASS_ABSTRACT_LIST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_LIST))
#DEFINE GEE_ABSTRACT_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_LIST, GeeAbstractListClass))
DECLARE FUNCTION gee_abstract_list_list_iterator() AS gpointer
DECLARE FUNCTION gee_abstract_list_get(BYVAL AS gint) AS gpointer
DECLARE SUB gee_abstract_list_set(BYVAL AS gint, BYVAL AS gpointer)
DECLARE FUNCTION gee_abstract_list_index_of(BYVAL AS gpointer) AS gint
DECLARE SUB gee_abstract_list_insert(BYVAL AS gint, BYVAL AS gpointer)
DECLARE FUNCTION gee_abstract_list_remove_at(BYVAL AS gint) AS gpointer
DECLARE FUNCTION gee_abstract_list_slice(BYVAL AS gint, BYVAL AS gint) AS gpointer
DECLARE FUNCTION gee_abstract_list_get_read_only_view() AS gpointer
TYPE _GeeAbstractListClass
  AS GeeAbstractCollectionClass parent_class
  list_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint) AS gpointer
  set AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gpointer)
  index_of AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gint
  insert AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gpointer)
  remove_at AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint) AS gpointer
  slice AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gint) AS gpointer
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractSet
  AS GeeAbstractCollection parent_instance
  AS GeeAbstractSetPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_set_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_SET (gee_abstract_set_get_type())
#DEFINE GEE_ABSTRACT_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_SET, GeeAbstractSet))
#DEFINE GEE_ABSTRACT_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_SET, GeeAbstractSetClass))
#DEFINE GEE_IS_ABSTRACT_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_SET))
#DEFINE GEE_IS_CLASS_ABSTRACT_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_SET))
#DEFINE GEE_ABSTRACT_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_SET, GeeAbstractSetClass))
DECLARE FUNCTION gee_abstract_set_get_read_only_view() AS gpointer
TYPE _GeeAbstractSetClass
  AS GeeAbstractCollectionClass parent_class
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractMap
  AS GObject parent_instance
  AS GeeAbstractMapPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_map_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_MAP (gee_abstract_map_get_type())
#DEFINE GEE_ABSTRACT_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_MAP, GeeAbstractMap))
#DEFINE GEE_ABSTRACT_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_MAP, GeeAbstractMapClass))
#DEFINE GEE_IS_ABSTRACT_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_MAP))
#DEFINE GEE_IS_CLASS_ABSTRACT_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_MAP))
#DEFINE GEE_ABSTRACT_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_MAP, GeeAbstractMapClass))
DECLARE FUNCTION gee_abstract_map_has_key(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_abstract_map_has(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_abstract_map_get(BYVAL AS gpointer) AS gpointer
DECLARE SUB gee_abstract_map_set(BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE FUNCTION gee_abstract_map_unset(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_abstract_map_map_iterator() AS gpointer
DECLARE SUB gee_abstract_map_clear()
DECLARE FUNCTION gee_abstract_map_foreach(BYVAL AS GeeForallFunc, BYVAL AS any /'void'/ PTR) AS gboolean
DECLARE FUNCTION gee_abstract_map_stream(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeStreamFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_abstract_map_get_size() AS gint
DECLARE FUNCTION gee_abstract_map_get_read_only() AS gboolean
DECLARE FUNCTION gee_abstract_map_get_keys() AS gpointer
DECLARE FUNCTION gee_abstract_map_get_values() AS gpointer
DECLARE FUNCTION gee_abstract_map_get_entries() AS gpointer
DECLARE FUNCTION gee_abstract_map_get_read_only_view() AS gpointer
TYPE _GeeAbstractMapClass
  AS GObjectClass parent_class
  has_key AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  has AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  get AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  set AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer)
  unset AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  map_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  clear AS SUB CDECL(BYVAL AS gpointer)
  foreach AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GeeForallFunc, BYVAL AS any /'void'/ PTR) AS gboolean
  stream AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeStreamFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractSortedSet
  AS GeeAbstractSet parent_instance
  AS GeeAbstractSortedSetPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_sorted_set_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_SORTED_SET (gee_abstract_sorted_set_get_type())
#DEFINE GEE_ABSTRACT_SORTED_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_SORTED_SET, GeeAbstractSortedSet))
#DEFINE GEE_ABSTRACT_SORTED_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_SORTED_SET, GeeAbstractSortedSetClass))
#DEFINE GEE_IS_ABSTRACT_SORTED_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_SORTED_SET))
#DEFINE GEE_IS_CLASS_ABSTRACT_SORTED_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_SORTED_SET))
#DEFINE GEE_ABSTRACT_SORTED_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_SORTED_SET, GeeAbstractSortedSetClass))
DECLARE FUNCTION gee_abstract_sorted_set_first() AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_last() AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_iterator_at(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_lower(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_higher(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_floor(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_ceil(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_head_set(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_tail_set(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_sub_set(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_set_get_read_only_view() AS gpointer
TYPE _GeeAbstractSortedSetClass
  AS GeeAbstractSetClass parent_class
  first AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  last AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  iterator_at AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  lower AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  higher AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  floor AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  ceil AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  head_set AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  tail_set AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  sub_set AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractSortedMap
  AS GeeAbstractMap parent_instance
  AS GeeAbstractSortedMapPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_sorted_map_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_SORTED_MAP (gee_abstract_sorted_map_get_type())
#DEFINE GEE_ABSTRACT_SORTED_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_SORTED_MAP, GeeAbstractSortedMap))
#DEFINE GEE_ABSTRACT_SORTED_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_SORTED_MAP, GeeAbstractSortedMapClass))
#DEFINE GEE_IS_ABSTRACT_SORTED_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_SORTED_MAP))
#DEFINE GEE_IS_CLASS_ABSTRACT_SORTED_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_SORTED_MAP))
#DEFINE GEE_ABSTRACT_SORTED_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_SORTED_MAP, GeeAbstractSortedMapClass))
DECLARE FUNCTION gee_abstract_sorted_map_head_map(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_map_tail_map(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_map_sub_map(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_abstract_sorted_map_get_ascending_keys() AS gpointer
DECLARE FUNCTION gee_abstract_sorted_map_get_ascending_entries() AS gpointer
TYPE _GeeAbstractSortedMapClass
  AS GeeAbstractMapClass parent_class
  head_map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  tail_map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  sub_map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeFutureIface
  AS GTypeInterface parent_iface
  wait AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gpointer
  wait_until AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint64, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
  wait_async AS SUB CDECL(BYVAL AS gpointer, BYVAL AS GAsyncReadyCallback, BYVAL AS any /'void'/ PTR)
  wait_finish AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gpointer
  map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureIface.map, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  light_map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureLightMapFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  light_map_broken AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureLightMapFunc, BYVAL AS any /'void'/ PTR) AS gpointer
  zip AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureIface.zip, BYVAL AS any /'void'/ PTR, BYVAL AS gpointer) AS gpointer
  flat_map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureIface.flat_map, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  get_value AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_ready AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_exception AS FUNCTION CDECL(BYVAL AS gpointer) AS GError PTR
END TYPE
' P_3

TYPE _GeeAbstractBidirList
  AS GeeAbstractList parent_instance
  AS GeeAbstractBidirListPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_bidir_list_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_BIDIR_LIST (gee_abstract_bidir_list_get_type())
#DEFINE GEE_ABSTRACT_BIDIR_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_BIDIR_LIST, GeeAbstractBidirList))
#DEFINE GEE_ABSTRACT_BIDIR_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_BIDIR_LIST, GeeAbstractBidirListClass))
#DEFINE GEE_IS_ABSTRACT_BIDIR_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_BIDIR_LIST))
#DEFINE GEE_IS_CLASS_ABSTRACT_BIDIR_LIST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_BIDIR_LIST))
#DEFINE GEE_ABSTRACT_BIDIR_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_BIDIR_LIST, GeeAbstractBidirListClass))
DECLARE FUNCTION gee_abstract_bidir_list_bidir_list_iterator() AS gpointer
DECLARE FUNCTION gee_abstract_bidir_list_get_read_only_view() AS gpointer
TYPE _GeeAbstractBidirListClass
  AS GeeAbstractListClass parent_class
  bidir_list_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractBidirSortedSet
  AS GeeAbstractSortedSet parent_instance
  AS GeeAbstractBidirSortedSetPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_bidir_sorted_set_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_BIDIR_SORTED_SET (gee_abstract_bidir_sorted_set_get_type())
#DEFINE GEE_ABSTRACT_BIDIR_SORTED_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_SET, GeeAbstractBidirSortedSet))
#DEFINE GEE_ABSTRACT_BIDIR_SORTED_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_SET, GeeAbstractBidirSortedSetClass))
#DEFINE GEE_IS_ABSTRACT_BIDIR_SORTED_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_SET))
#DEFINE GEE_IS_CLASS_ABSTRACT_BIDIR_SORTED_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_SET))
#DEFINE GEE_ABSTRACT_BIDIR_SORTED_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_SET, GeeAbstractBidirSortedSetClass))
DECLARE FUNCTION gee_abstract_bidir_sorted_set_bidir_iterator() AS gpointer
DECLARE FUNCTION gee_abstract_bidir_sorted_set_get_read_only_view() AS gpointer
TYPE _GeeAbstractBidirSortedSetClass
  AS GeeAbstractSortedSetClass parent_class
  bidir_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractBidirSortedMap
  AS GeeAbstractSortedMap parent_instance
  AS GeeAbstractBidirSortedMapPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_bidir_sorted_map_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_BIDIR_SORTED_MAP (gee_abstract_bidir_sorted_map_get_type())
#DEFINE GEE_ABSTRACT_BIDIR_SORTED_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_MAP, GeeAbstractBidirSortedMap))
#DEFINE GEE_ABSTRACT_BIDIR_SORTED_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_MAP, GeeAbstractBidirSortedMapClass))
#DEFINE GEE_IS_ABSTRACT_BIDIR_SORTED_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_MAP))
#DEFINE GEE_IS_CLASS_ABSTRACT_BIDIR_SORTED_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_MAP))
#DEFINE GEE_ABSTRACT_BIDIR_SORTED_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_BIDIR_SORTED_MAP, GeeAbstractBidirSortedMapClass))
DECLARE FUNCTION gee_abstract_bidir_sorted_map_bidir_map_iterator() AS gpointer
DECLARE FUNCTION gee_abstract_bidir_sorted_map_get_read_only_view() AS gpointer
TYPE _GeeAbstractBidirSortedMapClass
  AS GeeAbstractSortedMapClass parent_class
  bidir_map_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractMultiMap
  AS GObject parent_instance
  AS GeeAbstractMultiMapPrivate PTR priv
  AS gpointer _storage_map
END TYPE
DECLARE FUNCTION gee_abstract_multi_map_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_MULTI_MAP (gee_abstract_multi_map_get_type())
#DEFINE GEE_ABSTRACT_MULTI_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_MULTI_MAP, GeeAbstractMultiMap))
#DEFINE GEE_ABSTRACT_MULTI_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_MULTI_MAP, GeeAbstractMultiMapClass))
#DEFINE GEE_IS_ABSTRACT_MULTI_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_MULTI_MAP))
#DEFINE GEE_IS_CLASS_ABSTRACT_MULTI_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_MULTI_MAP))
#DEFINE GEE_ABSTRACT_MULTI_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_MULTI_MAP, GeeAbstractMultiMapClass))
DECLARE FUNCTION gee_abstract_multi_map_create_value_storage() AS gpointer
DECLARE FUNCTION gee_abstract_multi_map_create_multi_key_set() AS gpointer
DECLARE FUNCTION gee_abstract_multi_map_get_value_equal_func(BYVAL AS any /'void'/ PTR PTR, BYVAL AS GDestroyNotify PTR) AS GeeEqualDataFunc
DECLARE FUNCTION gee_abstract_multi_map_get_read_only_view() AS gpointer
TYPE _GeeAbstractMultiMapClass
  AS GObjectClass parent_class
  create_value_storage AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  create_multi_key_set AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_value_equal_func AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS any /'void'/ PTR PTR, BYVAL AS GDestroyNotify PTR) AS GeeEqualDataFunc
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractMultiSet
  AS GeeAbstractCollection parent_instance
  AS GeeAbstractMultiSetPrivate PTR priv
  AS gint _storage_map
END TYPE
DECLARE FUNCTION gee_abstract_multi_set_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_MULTI_SET (gee_abstract_multi_set_get_type())
#DEFINE GEE_ABSTRACT_MULTI_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_MULTI_SET, GeeAbstractMultiSet))
#DEFINE GEE_ABSTRACT_MULTI_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_MULTI_SET, GeeAbstractMultiSetClass))
#DEFINE GEE_IS_ABSTRACT_MULTI_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_MULTI_SET))
#DEFINE GEE_IS_CLASS_ABSTRACT_MULTI_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_MULTI_SET))
#DEFINE GEE_ABSTRACT_MULTI_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_MULTI_SET, GeeAbstractMultiSetClass))
DECLARE FUNCTION gee_abstract_multi_set_get_read_only_view() AS gpointer
TYPE _GeeAbstractMultiSetClass
  AS GeeAbstractCollectionClass parent_class
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeAbstractQueue
  AS GeeAbstractCollection parent_instance
  AS GeeAbstractQueuePrivate PTR priv
END TYPE
DECLARE FUNCTION gee_abstract_queue_get_type() AS GType
#DEFINE GEE_TYPE_ABSTRACT_QUEUE (gee_abstract_queue_get_type())
#DEFINE GEE_ABSTRACT_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ABSTRACT_QUEUE, GeeAbstractQueue))
#DEFINE GEE_ABSTRACT_QUEUE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ABSTRACT_QUEUE, GeeAbstractQueueClass))
#DEFINE GEE_IS_ABSTRACT_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ABSTRACT_QUEUE))
#DEFINE GEE_IS_CLASS_ABSTRACT_QUEUE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ABSTRACT_QUEUE))
#DEFINE GEE_ABSTRACT_QUEUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ABSTRACT_QUEUE, GeeAbstractQueueClass))
DECLARE FUNCTION gee_abstract_queue_peek() AS gpointer
DECLARE FUNCTION gee_abstract_queue_poll() AS gpointer
DECLARE FUNCTION gee_abstract_queue_get_capacity() AS gint
DECLARE FUNCTION gee_abstract_queue_get_remaining_capacity() AS gint
DECLARE FUNCTION gee_abstract_queue_get_is_full() AS gboolean
TYPE _GeeAbstractQueueClass
  AS GeeAbstractCollectionClass parent_class
  peek AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  poll AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  reserved0 AS SUB CDECL(BYVAL AS gpointer)
  reserved1 AS SUB CDECL(BYVAL AS gpointer)
  reserved2 AS SUB CDECL(BYVAL AS gpointer)
  reserved3 AS SUB CDECL(BYVAL AS gpointer)
  reserved4 AS SUB CDECL(BYVAL AS gpointer)
  reserved5 AS SUB CDECL(BYVAL AS gpointer)
  reserved6 AS SUB CDECL(BYVAL AS gpointer)
  reserved7 AS SUB CDECL(BYVAL AS gpointer)
  reserved8 AS SUB CDECL(BYVAL AS gpointer)
  reserved9 AS SUB CDECL(BYVAL AS gpointer)
END TYPE
TYPE _GeeArrayList
  AS GeeAbstractBidirList parent_instance
  AS GeeArrayListPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_array_list_get_type() AS GType
#DEFINE GEE_TYPE_ARRAY_LIST (gee_array_list_get_type())
#DEFINE GEE_ARRAY_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ARRAY_LIST, GeeArrayList))
#DEFINE GEE_ARRAY_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ARRAY_LIST, GeeArrayListClass))
#DEFINE GEE_IS_ARRAY_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ARRAY_LIST))
#DEFINE GEE_IS_CLASS_ARRAY_LIST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ARRAY_LIST))
#DEFINE GEE_ARRAY_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ARRAY_LIST, GeeArrayListClass))
DECLARE FUNCTION gee_array_list_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_array_list_new_wrap(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer PTR, BYVAL AS gint, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_array_list_add_all(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_array_list_get_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
TYPE _GeeArrayListClass
  AS GeeAbstractBidirListClass parent_class
END TYPE
TYPE _GeeArrayQueue
  AS GeeAbstractQueue parent_instance
  AS GeeArrayQueuePrivate PTR priv
END TYPE
DECLARE FUNCTION gee_array_queue_get_type() AS GType
#DEFINE GEE_TYPE_ARRAY_QUEUE (gee_array_queue_get_type())
#DEFINE GEE_ARRAY_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ARRAY_QUEUE, GeeArrayQueue))
#DEFINE GEE_ARRAY_QUEUE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ARRAY_QUEUE, GeeArrayQueueClass))
#DEFINE GEE_IS_ARRAY_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ARRAY_QUEUE))
#DEFINE GEE_IS_CLASS_ARRAY_QUEUE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_ARRAY_QUEUE))
#DEFINE GEE_ARRAY_QUEUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_ARRAY_QUEUE, GeeArrayQueueClass))
DECLARE FUNCTION gee_array_queue_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_array_queue_get_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
DECLARE FUNCTION gee_array_queue_get_is_empty() AS gboolean
TYPE _GeeArrayQueueClass
  AS GeeAbstractQueueClass parent_class
END TYPE
TYPE _GeeConcurrentList
  AS GeeAbstractList parent_instance
  AS GeeConcurrentListPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_concurrent_list_get_type() AS GType
#DEFINE GEE_TYPE_CONCURRENT_LIST (gee_concurrent_list_get_type())
#DEFINE GEE_CONCURRENT_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_CONCURRENT_LIST, GeeConcurrentList))
#DEFINE GEE_CONCURRENT_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_CONCURRENT_LIST, GeeConcurrentListClass))
#DEFINE GEE_IS_CONCURRENT_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_CONCURRENT_LIST))
#DEFINE GEE_IS_CLASS_CONCURRENT_LIST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_CONCURRENT_LIST))
#DEFINE GEE_CONCURRENT_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_CONCURRENT_LIST, GeeConcurrentListClass))
DECLARE FUNCTION gee_concurrent_list_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_concurrent_list_get_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
DECLARE FUNCTION gee_concurrent_list_get_is_empty() AS gboolean
TYPE _GeeConcurrentListClass
  AS GeeAbstractListClass parent_class
END TYPE
TYPE _GeeConcurrentSet
  AS GeeAbstractSortedSet parent_instance
  AS GeeConcurrentSetPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_concurrent_set_get_type() AS GType
#DEFINE GEE_TYPE_CONCURRENT_SET (gee_concurrent_set_get_type())
#DEFINE GEE_CONCURRENT_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_CONCURRENT_SET, GeeConcurrentSet))
#DEFINE GEE_CONCURRENT_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_CONCURRENT_SET, GeeConcurrentSetClass))
#DEFINE GEE_IS_CONCURRENT_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_CONCURRENT_SET))
#DEFINE GEE_IS_CLASS_CONCURRENT_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_CONCURRENT_SET))
#DEFINE GEE_CONCURRENT_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_CONCURRENT_SET, GeeConcurrentSetClass))
DECLARE FUNCTION gee_concurrent_set_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
TYPE _GeeConcurrentSetClass
  AS GeeAbstractSortedSetClass parent_class
END TYPE
TYPE _GeeHashMap
  AS GeeAbstractMap parent_instance
  AS GeeHashMapPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_concurrent_set_range_type_get_type() AS GType
#DEFINE GEE_TYPE_CONCURRENT_SET_RANGE_TYPE (gee_concurrent_set_range_type_get_type())
DECLARE FUNCTION gee_hash_map_get_type() AS GType
#DEFINE GEE_TYPE_HASH_MAP (gee_hash_map_get_type())
#DEFINE GEE_HASH_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_HASH_MAP, GeeHashMap))
#DEFINE GEE_HASH_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_HASH_MAP, GeeHashMapClass))
#DEFINE GEE_IS_HASH_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_HASH_MAP))
#DEFINE GEE_IS_CLASS_HASH_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_HASH_MAP))
#DEFINE GEE_HASH_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_HASH_MAP, GeeHashMapClass))
DECLARE FUNCTION gee_hash_map_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeHashDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_hash_map_get_key_hash_func(BYVAL AS any /'void'/ PTR PTR) AS GeeHashDataFunc
DECLARE FUNCTION gee_hash_map_get_key_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
DECLARE FUNCTION gee_hash_map_get_value_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
TYPE _GeeHashMapClass
  AS GeeAbstractMapClass parent_class
END TYPE
TYPE _GeeHashMultiMap
  AS GeeAbstractMultiMap parent_instance
  AS GeeHashMultiMapPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_hash_multi_map_get_type() AS GType
#DEFINE GEE_TYPE_HASH_MULTI_MAP (gee_hash_multi_map_get_type())
#DEFINE GEE_HASH_MULTI_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_HASH_MULTI_MAP, GeeHashMultiMap))
#DEFINE GEE_HASH_MULTI_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_HASH_MULTI_MAP, GeeHashMultiMapClass))
#DEFINE GEE_IS_HASH_MULTI_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_HASH_MULTI_MAP))
#DEFINE GEE_IS_CLASS_HASH_MULTI_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_HASH_MULTI_MAP))
#DEFINE GEE_HASH_MULTI_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_HASH_MULTI_MAP, GeeHashMultiMapClass))
DECLARE FUNCTION gee_hash_multi_map_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeHashDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS GeeHashDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_hash_multi_map_get_key_hash_func(BYVAL AS any /'void'/ PTR PTR) AS GeeHashDataFunc
DECLARE FUNCTION gee_hash_multi_map_get_key_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
DECLARE FUNCTION gee_hash_multi_map_get_value_hash_func(BYVAL AS any /'void'/ PTR PTR) AS GeeHashDataFunc
DECLARE FUNCTION gee_hash_multi_map_get_value_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
TYPE _GeeHashMultiMapClass
  AS GeeAbstractMultiMapClass parent_class
END TYPE
TYPE _GeeHashMultiSet
  AS GeeAbstractMultiSet parent_instance
  AS GeeHashMultiSetPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_hash_multi_set_get_type() AS GType
#DEFINE GEE_TYPE_HASH_MULTI_SET (gee_hash_multi_set_get_type())
#DEFINE GEE_HASH_MULTI_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_HASH_MULTI_SET, GeeHashMultiSet))
#DEFINE GEE_HASH_MULTI_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_HASH_MULTI_SET, GeeHashMultiSetClass))
#DEFINE GEE_IS_HASH_MULTI_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_HASH_MULTI_SET))
#DEFINE GEE_IS_CLASS_HASH_MULTI_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_HASH_MULTI_SET))
#DEFINE GEE_HASH_MULTI_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_HASH_MULTI_SET, GeeHashMultiSetClass))
DECLARE FUNCTION gee_hash_multi_set_new_fixed(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeHashDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_hash_multi_set_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeHashDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR) AS gpointer
DECLARE FUNCTION gee_hash_multi_set_get_hash_func(BYVAL AS any /'void'/ PTR PTR) AS GeeHashDataFunc
DECLARE FUNCTION gee_hash_multi_set_get_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
TYPE _GeeHashMultiSetClass
  AS GeeAbstractMultiSetClass parent_class
END TYPE
TYPE _GeeHashSet
  AS GeeAbstractSet parent_instance
  AS GeeHashSetPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_hash_set_get_type() AS GType
#DEFINE GEE_TYPE_HASH_SET (gee_hash_set_get_type())
#DEFINE GEE_HASH_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_HASH_SET, GeeHashSet))
#DEFINE GEE_HASH_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_HASH_SET, GeeHashSetClass))
#DEFINE GEE_IS_HASH_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_HASH_SET))
#DEFINE GEE_IS_CLASS_HASH_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_HASH_SET))
#DEFINE GEE_HASH_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_HASH_SET, GeeHashSetClass))
DECLARE FUNCTION gee_hash_set_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeHashDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_hash_set_get_hash_func(BYVAL AS any /'void'/ PTR PTR) AS GeeHashDataFunc
DECLARE FUNCTION gee_hash_set_get_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
TYPE _GeeHashSetClass
  AS GeeAbstractSetClass parent_class
END TYPE
DECLARE FUNCTION gee_hazard_pointer_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gconstpointer PTR) AS gpointer
DECLARE FUNCTION gee_hazard_pointer_get_hazard_pointer(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gconstpointer PTR PTR, BYVAL AS gsize, BYVAL AS gsize PTR) AS gpointer
DECLARE FUNCTION gee_hazard_pointer_get_pointer(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gconstpointer PTR PTR, BYVAL AS gsize, BYVAL AS gsize PTR) AS gpointer
DECLARE FUNCTION gee_hazard_pointer_exchange_hazard_pointer(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gconstpointer PTR PTR, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gsize PTR) AS gpointer
DECLARE SUB gee_hazard_pointer_set_pointer(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gconstpointer PTR PTR, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize)
DECLARE FUNCTION gee_hazard_pointer_exchange_pointer(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gconstpointer PTR PTR, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gsize PTR) AS gpointer
DECLARE FUNCTION gee_hazard_pointer_compare_and_exchange_pointer(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gconstpointer PTR PTR, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gsize) AS gboolean
DECLARE FUNCTION gee_hazard_pointer_get(BYVAL AS gboolean) AS gpointer
DECLARE SUB gee_hazard_pointer_release(BYVAL AS GDestroyNotify)
DECLARE SUB gee_hazard_pointer_set_default_policy(BYVAL AS GeeHazardPointerPolicy)
DECLARE SUB gee_hazard_pointer_set_thread_exit_policy(BYVAL AS GeeHazardPointerPolicy)
DECLARE FUNCTION gee_hazard_pointer_set_release_policy(BYVAL AS GeeHazardPointerReleasePolicy) AS gboolean
DECLARE FUNCTION gee_hazard_pointer_policy_get_type() AS GType
#DEFINE GEE_TYPE_HAZARD_POINTER_POLICY (gee_hazard_pointer_policy_get_type())
DECLARE FUNCTION gee_hazard_pointer_release_policy_get_type() AS GType
#DEFINE GEE_TYPE_HAZARD_POINTER_RELEASE_POLICY (gee_hazard_pointer_release_policy_get_type())
DECLARE FUNCTION gee_hazard_pointer_context_new(BYVAL AS GeeHazardPointerPolicy PTR) AS GeeHazardPointerContext PTR
DECLARE SUB gee_hazard_pointer_context_try_free()
DECLARE SUB gee_hazard_pointer_context_free_all()
DECLARE SUB gee_hazard_pointer_context_try_release()
DECLARE SUB gee_hazard_pointer_context_release()
TYPE _GeeLazy
  AS GTypeInstance parent_instance
  AS gint /'int'/ ref_count
  AS GeeLazyPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_lazy_get_type() AS GType
#DEFINE GEE_TYPE_LAZY (gee_lazy_get_type())
#DEFINE GEE_LAZY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_LAZY, GeeLazy))
#DEFINE GEE_LAZY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_LAZY, GeeLazyClass))
#DEFINE GEE_IS_LAZY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_LAZY))
#DEFINE GEE_IS_CLASS_LAZY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_LAZY))
#DEFINE GEE_LAZY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_LAZY, GeeLazyClass))
DECLARE FUNCTION gee_lazy_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeLazyFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_lazy_new_from_value(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer) AS gpointer
DECLARE SUB gee_lazy_eval()
DECLARE FUNCTION gee_lazy_get() AS gpointer
DECLARE FUNCTION gee_lazy_get_value() AS gpointer
DECLARE FUNCTION gee_lazy_get_future() AS gpointer
TYPE _GeeLazyClass
  AS GTypeClass parent_class
END TYPE
TYPE _GeeLinkedList
  AS GeeAbstractBidirList parent_instance
  AS GeeLinkedListPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_linked_list_get_type() AS GType
#DEFINE GEE_TYPE_LINKED_LIST (gee_linked_list_get_type())
#DEFINE GEE_LINKED_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_LINKED_LIST, GeeLinkedList))
#DEFINE GEE_LINKED_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_LINKED_LIST, GeeLinkedListClass))
#DEFINE GEE_IS_LINKED_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_LINKED_LIST))
#DEFINE GEE_IS_CLASS_LINKED_LIST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_LINKED_LIST))
#DEFINE GEE_LINKED_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_LINKED_LIST, GeeLinkedListClass))
DECLARE FUNCTION gee_linked_list_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_linked_list_first() AS gpointer
DECLARE FUNCTION gee_linked_list_last() AS gpointer
DECLARE FUNCTION gee_linked_list_get_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
TYPE _GeeLinkedListClass
  AS GeeAbstractBidirListClass parent_class
END TYPE
TYPE _GeePriorityQueue
  AS GeeAbstractQueue parent_instance
  AS GeePriorityQueuePrivate PTR priv
END TYPE
DECLARE FUNCTION gee_priority_queue_get_type() AS GType
#DEFINE GEE_TYPE_PRIORITY_QUEUE (gee_priority_queue_get_type())
#DEFINE GEE_PRIORITY_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_PRIORITY_QUEUE, GeePriorityQueue))
#DEFINE GEE_PRIORITY_QUEUE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_PRIORITY_QUEUE, GeePriorityQueueClass))
#DEFINE GEE_IS_PRIORITY_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_PRIORITY_QUEUE))
#DEFINE GEE_IS_CLASS_PRIORITY_QUEUE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_PRIORITY_QUEUE))
#DEFINE GEE_PRIORITY_QUEUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_PRIORITY_QUEUE, GeePriorityQueueClass))
DECLARE FUNCTION gee_priority_queue_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_priority_queue_offer(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_priority_queue_drain(BYVAL AS gpointer, BYVAL AS gint) AS gint
DECLARE FUNCTION gee_priority_queue_get_compare_func(BYVAL AS any /'void'/ PTR PTR) AS GCompareDataFunc
TYPE _GeePriorityQueueClass
  AS GeeAbstractQueueClass parent_class
END TYPE
TYPE _GeePromise
  AS GTypeInstance parent_instance
  AS gint /'int'/ ref_count
  AS GeePromisePrivate PTR priv
END TYPE
DECLARE FUNCTION gee_promise_get_type() AS GType
#DEFINE GEE_TYPE_PROMISE (gee_promise_get_type())
#DEFINE GEE_PROMISE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_PROMISE, GeePromise))
#DEFINE GEE_PROMISE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_PROMISE, GeePromiseClass))
#DEFINE GEE_IS_PROMISE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_PROMISE))
#DEFINE GEE_IS_CLASS_PROMISE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_PROMISE))
#DEFINE GEE_PROMISE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_PROMISE, GeePromiseClass))
DECLARE FUNCTION gee_promise_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE SUB gee_promise_set_value(BYVAL AS gpointer)
DECLARE SUB gee_promise_set_exception(BYVAL AS GError PTR)
DECLARE FUNCTION gee_promise_get_future() AS gpointer
TYPE _GeePromiseClass
  AS GTypeClass parent_class
END TYPE
TYPE _GeeTreeMap
  AS GeeAbstractBidirSortedMap parent_instance
  AS GeeTreeMapPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_tree_map_get_type() AS GType
#DEFINE GEE_TYPE_TREE_MAP (gee_tree_map_get_type())
#DEFINE GEE_TREE_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_TREE_MAP, GeeTreeMap))
#DEFINE GEE_TREE_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_TREE_MAP, GeeTreeMapClass))
#DEFINE GEE_IS_TREE_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_TREE_MAP))
#DEFINE GEE_IS_CLASS_TREE_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_TREE_MAP))
#DEFINE GEE_TREE_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_TREE_MAP, GeeTreeMapClass))
DECLARE FUNCTION gee_tree_map_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_tree_map_get_key_compare_func(BYVAL AS any /'void'/ PTR PTR) AS GCompareDataFunc
DECLARE FUNCTION gee_tree_map_get_value_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
TYPE _GeeTreeMapClass
  AS GeeAbstractBidirSortedMapClass parent_class
END TYPE
TYPE _GeeTreeMultiMap
  AS GeeAbstractMultiMap parent_instance
  AS GeeTreeMultiMapPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_tree_multi_map_get_type() AS GType
#DEFINE GEE_TYPE_TREE_MULTI_MAP (gee_tree_multi_map_get_type())
#DEFINE GEE_TREE_MULTI_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_TREE_MULTI_MAP, GeeTreeMultiMap))
#DEFINE GEE_TREE_MULTI_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_TREE_MULTI_MAP, GeeTreeMultiMapClass))
#DEFINE GEE_IS_TREE_MULTI_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_TREE_MULTI_MAP))
#DEFINE GEE_IS_CLASS_TREE_MULTI_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_TREE_MULTI_MAP))
#DEFINE GEE_TREE_MULTI_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_TREE_MULTI_MAP, GeeTreeMultiMapClass))
DECLARE FUNCTION gee_tree_multi_map_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_tree_multi_map_get_key_compare_func(BYVAL AS any /'void'/ PTR PTR) AS GCompareDataFunc
DECLARE FUNCTION gee_tree_multi_map_get_value_compare_func(BYVAL AS any /'void'/ PTR PTR) AS GCompareDataFunc
TYPE _GeeTreeMultiMapClass
  AS GeeAbstractMultiMapClass parent_class
END TYPE
TYPE _GeeTreeMultiSet
  AS GeeAbstractMultiSet parent_instance
  AS GeeTreeMultiSetPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_tree_multi_set_get_type() AS GType
#DEFINE GEE_TYPE_TREE_MULTI_SET (gee_tree_multi_set_get_type())
#DEFINE GEE_TREE_MULTI_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_TREE_MULTI_SET, GeeTreeMultiSet))
#DEFINE GEE_TREE_MULTI_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_TREE_MULTI_SET, GeeTreeMultiSetClass))
#DEFINE GEE_IS_TREE_MULTI_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_TREE_MULTI_SET))
#DEFINE GEE_IS_CLASS_TREE_MULTI_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_TREE_MULTI_SET))
#DEFINE GEE_TREE_MULTI_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_TREE_MULTI_SET, GeeTreeMultiSetClass))
DECLARE FUNCTION gee_tree_multi_set_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_tree_multi_set_get_compare_func(BYVAL AS any /'void'/ PTR PTR) AS GCompareDataFunc
TYPE _GeeTreeMultiSetClass
  AS GeeAbstractMultiSetClass parent_class
END TYPE
TYPE _GeeTreeSet
  AS GeeAbstractBidirSortedSet parent_instance
  AS GeeTreeSetPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_tree_set_get_type() AS GType
#DEFINE GEE_TYPE_TREE_SET (gee_tree_set_get_type())
#DEFINE GEE_TREE_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_TREE_SET, GeeTreeSet))
#DEFINE GEE_TREE_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_TREE_SET, GeeTreeSetClass))
#DEFINE GEE_IS_TREE_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_TREE_SET))
#DEFINE GEE_IS_CLASS_TREE_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_TREE_SET))
#DEFINE GEE_TREE_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_TREE_SET, GeeTreeSetClass))
DECLARE FUNCTION gee_tree_set_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_tree_set_get_compare_func(BYVAL AS any /'void'/ PTR PTR) AS GCompareDataFunc
TYPE _GeeTreeSetClass
  AS GeeAbstractBidirSortedSetClass parent_class
END TYPE
TYPE _GeeUnrolledLinkedList
  AS GeeAbstractBidirList parent_instance
  AS GeeUnrolledLinkedListPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_unrolled_linked_list_get_type() AS GType
#DEFINE GEE_TYPE_UNROLLED_LINKED_LIST (gee_unrolled_linked_list_get_type())
#DEFINE GEE_UNROLLED_LINKED_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_UNROLLED_LINKED_LIST, GeeUnrolledLinkedList))
#DEFINE GEE_UNROLLED_LINKED_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_UNROLLED_LINKED_LIST, GeeUnrolledLinkedListClass))
#DEFINE GEE_IS_UNROLLED_LINKED_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_UNROLLED_LINKED_LIST))
#DEFINE GEE_IS_CLASS_UNROLLED_LINKED_LIST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_UNROLLED_LINKED_LIST))
#DEFINE GEE_UNROLLED_LINKED_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_UNROLLED_LINKED_LIST, GeeUnrolledLinkedListClass))
DECLARE FUNCTION gee_unrolled_linked_list_new(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeEqualDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_unrolled_linked_list_get_equal_func(BYVAL AS any /'void'/ PTR PTR) AS GeeEqualDataFunc
TYPE _GeeUnrolledLinkedListClass
  AS GeeAbstractBidirListClass parent_class
END TYPE
DECLARE FUNCTION gee_bidir_iterator_get_type() AS GType
#DEFINE GEE_TYPE_BIDIR_ITERATOR (gee_bidir_iterator_get_type())
#DEFINE GEE_BIDIR_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_BIDIR_ITERATOR, GeeBidirIterator))
#DEFINE GEE_BIDIR_ITERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_BIDIR_ITERATOR, GeeBidirIteratorIface))
#DEFINE GEE_IS_BIDIR_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_BIDIR_ITERATOR))
#DEFINE GEE_BIDIR_ITERATOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_BIDIR_ITERATOR, GeeBidirIteratorIface))
DECLARE FUNCTION gee_bidir_iterator_previous() AS gboolean
DECLARE FUNCTION gee_bidir_iterator_has_previous() AS gboolean
DECLARE FUNCTION gee_bidir_iterator_first() AS gboolean
DECLARE FUNCTION gee_bidir_iterator_last() AS gboolean
TYPE _GeeBidirIteratorIface
  AS GTypeInterface parent_iface
  previous AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  has_previous AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  first AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  last AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
END TYPE
DECLARE FUNCTION gee_bidir_list_get_type() AS GType
#DEFINE GEE_TYPE_BIDIR_LIST (gee_bidir_list_get_type())
#DEFINE GEE_BIDIR_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_BIDIR_LIST, GeeBidirList))
#DEFINE GEE_BIDIR_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_BIDIR_LIST, GeeBidirListIface))
#DEFINE GEE_IS_BIDIR_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_BIDIR_LIST))
#DEFINE GEE_BIDIR_LIST_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_BIDIR_LIST, GeeBidirListIface))
DECLARE FUNCTION gee_bidir_list_bidir_list_iterator() AS gpointer
DECLARE FUNCTION gee_bidir_list_get_read_only_view() AS gpointer
TYPE _GeeBidirListIface
  AS GTypeInterface parent_iface
  bidir_list_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_bidir_list_iterator_get_type() AS GType
#DEFINE GEE_TYPE_BIDIR_LIST_ITERATOR (gee_bidir_list_iterator_get_type())
#DEFINE GEE_BIDIR_LIST_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_BIDIR_LIST_ITERATOR, GeeBidirListIterator))
#DEFINE GEE_BIDIR_LIST_ITERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_BIDIR_LIST_ITERATOR, GeeBidirListIteratorIface))
#DEFINE GEE_IS_BIDIR_LIST_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_BIDIR_LIST_ITERATOR))
#DEFINE GEE_BIDIR_LIST_ITERATOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_BIDIR_LIST_ITERATOR, GeeBidirListIteratorIface))
DECLARE SUB gee_bidir_list_iterator_insert(BYVAL AS gpointer)
TYPE _GeeBidirListIteratorIface
  AS GTypeInterface parent_iface
  insert AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
END TYPE
DECLARE FUNCTION gee_bidir_map_iterator_get_type() AS GType
#DEFINE GEE_TYPE_BIDIR_MAP_ITERATOR (gee_bidir_map_iterator_get_type())
#DEFINE GEE_BIDIR_MAP_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_BIDIR_MAP_ITERATOR, GeeBidirMapIterator))
#DEFINE GEE_BIDIR_MAP_ITERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_BIDIR_MAP_ITERATOR, GeeBidirMapIteratorIface))
#DEFINE GEE_IS_BIDIR_MAP_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_BIDIR_MAP_ITERATOR))
#DEFINE GEE_BIDIR_MAP_ITERATOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_BIDIR_MAP_ITERATOR, GeeBidirMapIteratorIface))
DECLARE FUNCTION gee_bidir_map_iterator_previous() AS gboolean
DECLARE FUNCTION gee_bidir_map_iterator_has_previous() AS gboolean
DECLARE FUNCTION gee_bidir_map_iterator_first() AS gboolean
DECLARE FUNCTION gee_bidir_map_iterator_last() AS gboolean
TYPE _GeeBidirMapIteratorIface
  AS GTypeInterface parent_iface
  previous AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  has_previous AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  first AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  last AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
END TYPE
DECLARE FUNCTION gee_bidir_sorted_set_get_type() AS GType
#DEFINE GEE_TYPE_BIDIR_SORTED_SET (gee_bidir_sorted_set_get_type())
#DEFINE GEE_BIDIR_SORTED_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_BIDIR_SORTED_SET, GeeBidirSortedSet))
#DEFINE GEE_BIDIR_SORTED_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_BIDIR_SORTED_SET, GeeBidirSortedSetIface))
#DEFINE GEE_IS_BIDIR_SORTED_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_BIDIR_SORTED_SET))
#DEFINE GEE_BIDIR_SORTED_SET_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_BIDIR_SORTED_SET, GeeBidirSortedSetIface))
DECLARE FUNCTION gee_bidir_sorted_set_bidir_iterator() AS gpointer
DECLARE FUNCTION gee_bidir_sorted_set_empty(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_bidir_sorted_set_get_read_only_view() AS gpointer
TYPE _GeeBidirSortedSetIface
  AS GTypeInterface parent_iface
  bidir_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_bidir_sorted_map_get_type() AS GType
#DEFINE GEE_TYPE_BIDIR_SORTED_MAP (gee_bidir_sorted_map_get_type())
#DEFINE GEE_BIDIR_SORTED_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_BIDIR_SORTED_MAP, GeeBidirSortedMap))
#DEFINE GEE_BIDIR_SORTED_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_BIDIR_SORTED_MAP, GeeBidirSortedMapIface))
#DEFINE GEE_IS_BIDIR_SORTED_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_BIDIR_SORTED_MAP))
#DEFINE GEE_BIDIR_SORTED_MAP_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_BIDIR_SORTED_MAP, GeeBidirSortedMapIface))
DECLARE FUNCTION gee_bidir_sorted_map_bidir_map_iterator() AS gpointer
DECLARE FUNCTION gee_bidir_sorted_map_empty(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_bidir_sorted_map_get_read_only_view() AS gpointer
TYPE _GeeBidirSortedMapIface
  AS GTypeInterface parent_iface
  bidir_map_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_collection_get_type() AS GType
#DEFINE GEE_TYPE_COLLECTION (gee_collection_get_type())
#DEFINE GEE_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_COLLECTION, GeeCollection))
#DEFINE GEE_COLLECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_COLLECTION, GeeCollectionIface))
#DEFINE GEE_IS_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_COLLECTION))
#DEFINE GEE_COLLECTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_COLLECTION, GeeCollectionIface))
DECLARE FUNCTION gee_collection_contains(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_collection_add(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_collection_remove(BYVAL AS gpointer) AS gboolean
DECLARE SUB gee_collection_clear()
DECLARE FUNCTION gee_collection_add_all(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_collection_contains_all(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_collection_remove_all(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_collection_retain_all(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_collection_to_array(BYVAL AS gint PTR) AS gpointer PTR
DECLARE FUNCTION gee_collection_add_all_array(BYVAL AS gpointer PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gee_collection_contains_all_array(BYVAL AS gpointer PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gee_collection_remove_all_array(BYVAL AS gpointer PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gee_collection_add_all_iterator(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_collection_contains_all_iterator(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_collection_remove_all_iterator(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_collection_empty(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_collection_get_size() AS gint
DECLARE FUNCTION gee_collection_get_is_empty() AS gboolean
DECLARE FUNCTION gee_collection_get_read_only() AS gboolean
DECLARE FUNCTION gee_collection_get_read_only_view() AS gpointer
TYPE _GeeCollectionIface
  AS GTypeInterface parent_iface
  contains AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  add AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  remove AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  clear AS SUB CDECL(BYVAL AS gpointer)
  add_all AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  contains_all AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  remove_all AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  retain_all AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  to_array AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint PTR) AS gpointer PTR
  add_all_array AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer PTR, BYVAL AS gint) AS gboolean
  contains_all_array AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer PTR, BYVAL AS gint) AS gboolean
  remove_all_array AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer PTR, BYVAL AS gint) AS gboolean
  add_all_iterator AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  contains_all_iterator AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  remove_all_iterator AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  get_size AS FUNCTION CDECL(BYVAL AS gpointer) AS gint
  get_is_empty AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_read_only AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_comparable_get_type() AS GType
#DEFINE GEE_TYPE_COMPARABLE (gee_comparable_get_type())
#DEFINE GEE_COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_COMPARABLE, GeeComparable))
#DEFINE GEE_COMPARABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_COMPARABLE, GeeComparableIface))
#DEFINE GEE_IS_COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_COMPARABLE))
#DEFINE GEE_COMPARABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_COMPARABLE, GeeComparableIface))
DECLARE FUNCTION gee_comparable_compare_to(BYVAL AS gpointer) AS gint
TYPE _GeeComparableIface
  AS GTypeInterface parent_iface
  compare_to AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gint
END TYPE
DECLARE FUNCTION gee_deque_get_type() AS GType
#DEFINE GEE_TYPE_DEQUE (gee_deque_get_type())
#DEFINE GEE_DEQUE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_DEQUE, GeeDeque))
#DEFINE GEE_DEQUE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_DEQUE, GeeDequeIface))
#DEFINE GEE_IS_DEQUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_DEQUE))
#DEFINE GEE_DEQUE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_DEQUE, GeeDequeIface))
DECLARE FUNCTION gee_deque_offer_head(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_deque_peek_head() AS gpointer
DECLARE FUNCTION gee_deque_poll_head() AS gpointer
DECLARE FUNCTION gee_deque_drain_head(BYVAL AS gpointer, BYVAL AS gint) AS gint
DECLARE FUNCTION gee_deque_offer_tail(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_deque_peek_tail() AS gpointer
DECLARE FUNCTION gee_deque_poll_tail() AS gpointer
DECLARE FUNCTION gee_deque_drain_tail(BYVAL AS gpointer, BYVAL AS gint) AS gint
TYPE _GeeDequeIface
  AS GTypeInterface parent_iface
  offer_head AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  peek_head AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  poll_head AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  drain_head AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gint) AS gint
  offer_tail AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  peek_tail AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  poll_tail AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  drain_tail AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gint) AS gint
END TYPE
DECLARE FUNCTION gee_future_get_type() AS GType
#DEFINE GEE_TYPE_FUTURE (gee_future_get_type())
#DEFINE GEE_FUTURE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_FUTURE, GeeFuture))
#DEFINE GEE_FUTURE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_FUTURE, GeeFutureIface))
#DEFINE GEE_IS_FUTURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_FUTURE))
#DEFINE GEE_FUTURE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_FUTURE, GeeFutureIface))
DECLARE FUNCTION gee_future_wait(BYVAL AS GError PTR PTR) AS gpointer
DECLARE FUNCTION gee_future_wait_until(BYVAL AS gint64, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gee_future_wait_async(BYVAL AS GAsyncReadyCallback, BYVAL AS any /'void'/ PTR)
DECLARE FUNCTION gee_future_wait_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gpointer
DECLARE FUNCTION gee_future_map(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureIface.map, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_future_light_map_fixed(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureLightMapFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_future_light_map(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureLightMapFunc, BYVAL AS any /'void'/ PTR) AS gpointer
DECLARE FUNCTION gee_future_zip(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureIface.zip, BYVAL AS any /'void'/ PTR, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_future_flat_map(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFutureIface.flat_map, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_future_get_value() AS gpointer
DECLARE FUNCTION gee_future_get_ready() AS gboolean
DECLARE FUNCTION gee_future_get_exception() AS GError PTR
DECLARE FUNCTION gee_hashable_get_type() AS GType
#DEFINE GEE_TYPE_HASHABLE (gee_hashable_get_type())
#DEFINE GEE_HASHABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_HASHABLE, GeeHashable))
#DEFINE GEE_HASHABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_HASHABLE, GeeHashableIface))
#DEFINE GEE_IS_HASHABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_HASHABLE))
#DEFINE GEE_HASHABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_HASHABLE, GeeHashableIface))
DECLARE FUNCTION gee_hashable_hash() AS guint
DECLARE FUNCTION gee_hashable_equal_to(BYVAL AS gpointer) AS gboolean
TYPE _GeeHashableIface
  AS GTypeInterface parent_iface
  hash AS FUNCTION CDECL(BYVAL AS gpointer) AS guint
  equal_to AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
END TYPE
DECLARE FUNCTION gee_iterable_get_type() AS GType
#DEFINE GEE_TYPE_ITERABLE (gee_iterable_get_type())
#DEFINE GEE_ITERABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ITERABLE, GeeIterable))
#DEFINE GEE_ITERABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ITERABLE, GeeIterableIface))
#DEFINE GEE_IS_ITERABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ITERABLE))
#DEFINE GEE_ITERABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_ITERABLE, GeeIterableIface))
DECLARE FUNCTION gee_iterable_iterator() AS gpointer
TYPE _GeeIterableIface
  AS GTypeInterface parent_iface
  iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_iterator_get_type() AS GType
#DEFINE GEE_TYPE_ITERATOR (gee_iterator_get_type())
#DEFINE GEE_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_ITERATOR, GeeIterator))
#DEFINE GEE_ITERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_ITERATOR, GeeIteratorIface))
#DEFINE GEE_IS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_ITERATOR))
#DEFINE GEE_ITERATOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_ITERATOR, GeeIteratorIface))
DECLARE FUNCTION gee_iterator_next() AS gboolean
DECLARE FUNCTION gee_iterator_has_next() AS gboolean
DECLARE FUNCTION gee_iterator_get() AS gpointer
DECLARE SUB gee_iterator_remove()
DECLARE FUNCTION gee_iterator_unfold(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeUnfoldFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_iterator_concat(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_iterator_get_valid() AS gboolean
DECLARE FUNCTION gee_iterator_get_read_only() AS gboolean
TYPE _GeeIteratorIface
  AS GTypeInterface parent_iface
  next AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  has_next AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  remove AS SUB CDECL(BYVAL AS gpointer)
  get_valid AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_read_only AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
END TYPE
DECLARE FUNCTION gee_list_get_type() AS GType
#DEFINE GEE_TYPE_LIST (gee_list_get_type())
#DEFINE GEE_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_LIST, GeeList))
#DEFINE GEE_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_LIST, GeeListIface))
#DEFINE GEE_IS_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_LIST))
#DEFINE GEE_LIST_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_LIST, GeeListIface))
DECLARE FUNCTION gee_list_list_iterator() AS gpointer
DECLARE FUNCTION gee_list_get(BYVAL AS gint) AS gpointer
DECLARE SUB gee_list_set(BYVAL AS gint, BYVAL AS gpointer)
DECLARE FUNCTION gee_list_index_of(BYVAL AS gpointer) AS gint
DECLARE SUB gee_list_insert(BYVAL AS gint, BYVAL AS gpointer)
DECLARE FUNCTION gee_list_remove_at(BYVAL AS gint) AS gpointer
DECLARE FUNCTION gee_list_slice(BYVAL AS gint, BYVAL AS gint) AS gpointer
DECLARE FUNCTION gee_list_first() AS gpointer
DECLARE FUNCTION gee_list_last() AS gpointer
DECLARE SUB gee_list_insert_all(BYVAL AS gint, BYVAL AS gpointer)
DECLARE SUB gee_list_sort(BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gee_list_empty(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_list_get_read_only_view() AS gpointer
TYPE _GeeListIface
  AS GTypeInterface parent_iface
  list_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint) AS gpointer
  set AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gpointer)
  index_of AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gint
  insert AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gpointer)
  remove_at AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint) AS gpointer
  slice AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gint) AS gpointer
  first AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  last AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  insert_all AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gpointer)
  sort AS SUB CDECL(BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify)
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_list_iterator_get_type() AS GType
#DEFINE GEE_TYPE_LIST_ITERATOR (gee_list_iterator_get_type())
#DEFINE GEE_LIST_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_LIST_ITERATOR, GeeListIterator))
#DEFINE GEE_LIST_ITERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_LIST_ITERATOR, GeeListIteratorIface))
#DEFINE GEE_IS_LIST_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_LIST_ITERATOR))
#DEFINE GEE_LIST_ITERATOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_LIST_ITERATOR, GeeListIteratorIface))
DECLARE SUB gee_list_iterator_set(BYVAL AS gpointer)
DECLARE SUB gee_list_iterator_add(BYVAL AS gpointer)
DECLARE FUNCTION gee_list_iterator_index() AS gint
TYPE _GeeListIteratorIface
  AS GTypeInterface parent_iface
  set AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
  add AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
  index AS FUNCTION CDECL(BYVAL AS gpointer) AS gint
END TYPE
DECLARE FUNCTION gee_map_get_type() AS GType
#DEFINE GEE_TYPE_MAP (gee_map_get_type())
#DEFINE GEE_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_MAP, GeeMap))
#DEFINE GEE_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_MAP, GeeMapIface))
#DEFINE GEE_IS_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_MAP))
#DEFINE GEE_MAP_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_MAP, GeeMapIface))
DECLARE FUNCTION gee_map_has_key(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_map_contains(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_map_has(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_map_get(BYVAL AS gpointer) AS gpointer
DECLARE SUB gee_map_set(BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE FUNCTION gee_map_unset(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_map_remove(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE SUB gee_map_clear()
DECLARE FUNCTION gee_map_map_iterator() AS gpointer
DECLARE SUB gee_map_set_all(BYVAL AS gpointer)
DECLARE FUNCTION gee_map_unset_all(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_map_remove_all(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_map_has_all(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_map_contains_all(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_map_empty(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_map_get_size() AS gint
DECLARE FUNCTION gee_map_get_is_empty() AS gboolean
DECLARE FUNCTION gee_map_get_read_only() AS gboolean
DECLARE FUNCTION gee_map_get_keys() AS gpointer
DECLARE FUNCTION gee_map_get_values() AS gpointer
DECLARE FUNCTION gee_map_get_entries() AS gpointer
DECLARE FUNCTION gee_map_get_read_only_view() AS gpointer
DECLARE FUNCTION gee_map_get_key_type() AS GType
DECLARE FUNCTION gee_map_get_value_type() AS GType
TYPE _GeeMapIface
  AS GTypeInterface parent_iface
  has_key AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  has AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  get AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  set AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer)
  unset AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  clear AS SUB CDECL(BYVAL AS gpointer)
  map_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  set_all AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
  unset_all AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  has_all AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  get_size AS FUNCTION CDECL(BYVAL AS gpointer) AS gint
  get_is_empty AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_read_only AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_keys AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_values AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_entries AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
TYPE _GeeMapEntry
  AS GObject parent_instance
  AS GeeMapEntryPrivate PTR priv
END TYPE
DECLARE FUNCTION gee_map_entry_get_type() AS GType
#DEFINE GEE_TYPE_MAP_ENTRY (gee_map_entry_get_type())
#DEFINE GEE_MAP_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_MAP_ENTRY, GeeMapEntry))
#DEFINE GEE_MAP_ENTRY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_MAP_ENTRY, GeeMapEntryClass))
#DEFINE GEE_IS_MAP_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_MAP_ENTRY))
#DEFINE GEE_IS_CLASS_MAP_ENTRY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GEE_TYPE_MAP_ENTRY))
#DEFINE GEE_MAP_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GEE_TYPE_MAP_ENTRY, GeeMapEntryClass))
DECLARE FUNCTION gee_map_entry_get_key() AS gpointer
DECLARE FUNCTION gee_map_entry_get_value() AS gpointer
DECLARE SUB gee_map_entry_set_value(BYVAL AS gpointer)
DECLARE FUNCTION gee_map_entry_get_read_only() AS gboolean
TYPE _GeeMapEntryClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION gee_map_iterator_get_type() AS GType
#DEFINE GEE_TYPE_MAP_ITERATOR (gee_map_iterator_get_type())
#DEFINE GEE_MAP_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_MAP_ITERATOR, GeeMapIterator))
#DEFINE GEE_MAP_ITERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_MAP_ITERATOR, GeeMapIteratorIface))
#DEFINE GEE_IS_MAP_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_MAP_ITERATOR))
#DEFINE GEE_MAP_ITERATOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_MAP_ITERATOR, GeeMapIteratorIface))
DECLARE FUNCTION gee_map_iterator_next() AS gboolean
DECLARE FUNCTION gee_map_iterator_has_next() AS gboolean
DECLARE FUNCTION gee_map_iterator_get_key() AS gpointer
DECLARE FUNCTION gee_map_iterator_get_value() AS gpointer
DECLARE SUB gee_map_iterator_set_value(BYVAL AS gpointer)
DECLARE SUB gee_map_iterator_unset()
DECLARE FUNCTION gee_map_iterator_fold(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFoldMapFunc, BYVAL AS any /'void'/ PTR, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_map_iterator_foreach(BYVAL AS GeeForallMapFunc, BYVAL AS any /'void'/ PTR) AS gboolean
DECLARE FUNCTION gee_map_iterator_get_valid() AS gboolean
DECLARE FUNCTION gee_map_iterator_get_mutable() AS gboolean
DECLARE FUNCTION gee_map_iterator_get_read_only() AS gboolean
TYPE _GeeMapIteratorIface
  AS GTypeInterface parent_iface
  next AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  has_next AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_key AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_value AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  set_value AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
  unset AS SUB CDECL(BYVAL AS gpointer)
  fold AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFoldMapFunc, BYVAL AS any /'void'/ PTR, BYVAL AS gpointer) AS gpointer
  foreach AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GeeForallMapFunc, BYVAL AS any /'void'/ PTR) AS gboolean
  get_valid AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_mutable AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_read_only AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
END TYPE
DECLARE FUNCTION gee_multi_map_get_type() AS GType
#DEFINE GEE_TYPE_MULTI_MAP (gee_multi_map_get_type())
#DEFINE GEE_MULTI_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_MULTI_MAP, GeeMultiMap))
#DEFINE GEE_MULTI_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_MULTI_MAP, GeeMultiMapIface))
#DEFINE GEE_IS_MULTI_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_MULTI_MAP))
#DEFINE GEE_MULTI_MAP_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_MULTI_MAP, GeeMultiMapIface))
DECLARE FUNCTION gee_multi_map_get_keys() AS gpointer
DECLARE FUNCTION gee_multi_map_get_all_keys() AS gpointer
DECLARE FUNCTION gee_multi_map_get_values() AS gpointer
DECLARE FUNCTION gee_multi_map_contains(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_multi_map_get(BYVAL AS gpointer) AS gpointer
DECLARE SUB gee_multi_map_set(BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE FUNCTION gee_multi_map_remove(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_multi_map_remove_all(BYVAL AS gpointer) AS gboolean
DECLARE SUB gee_multi_map_clear()
DECLARE FUNCTION gee_multi_map_map_iterator() AS gpointer
DECLARE FUNCTION gee_multi_map_get_size() AS gint
DECLARE FUNCTION gee_multi_map_get_read_only() AS gboolean
DECLARE FUNCTION gee_multi_map_get_key_type() AS GType
DECLARE FUNCTION gee_multi_map_get_value_type() AS GType
DECLARE FUNCTION gee_multi_map_get_read_only_view() AS gpointer
TYPE _GeeMultiMapIface
  AS GTypeInterface parent_iface
  get_keys AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_all_keys AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_values AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  contains AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  get AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  set AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer)
  remove AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  remove_all AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  clear AS SUB CDECL(BYVAL AS gpointer)
  map_iterator AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_size AS FUNCTION CDECL(BYVAL AS gpointer) AS gint
  get_read_only AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_multi_set_get_type() AS GType
#DEFINE GEE_TYPE_MULTI_SET (gee_multi_set_get_type())
#DEFINE GEE_MULTI_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_MULTI_SET, GeeMultiSet))
#DEFINE GEE_MULTI_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_MULTI_SET, GeeMultiSetIface))
#DEFINE GEE_IS_MULTI_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_MULTI_SET))
#DEFINE GEE_MULTI_SET_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_MULTI_SET, GeeMultiSetIface))
DECLARE FUNCTION gee_multi_set_count(BYVAL AS gpointer) AS gint
DECLARE FUNCTION gee_multi_set_empty(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_multi_set_get_read_only_view() AS gpointer
TYPE _GeeMultiSetIface
  AS GTypeInterface parent_iface
  count AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gint
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_queue_get_type() AS GType
#DEFINE GEE_TYPE_QUEUE (gee_queue_get_type())
#DEFINE GEE_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_QUEUE, GeeQueue))
#DEFINE GEE_QUEUE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_QUEUE, GeeQueueIface))
#DEFINE GEE_IS_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_QUEUE))
#DEFINE GEE_QUEUE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_QUEUE, GeeQueueIface))
DECLARE FUNCTION gee_queue_offer(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gee_queue_peek() AS gpointer
DECLARE FUNCTION gee_queue_poll() AS gpointer
DECLARE FUNCTION gee_queue_drain(BYVAL AS gpointer, BYVAL AS gint) AS gint
DECLARE FUNCTION gee_queue_get_capacity() AS gint
DECLARE FUNCTION gee_queue_get_remaining_capacity() AS gint
DECLARE FUNCTION gee_queue_get_is_full() AS gboolean
TYPE _GeeQueueIface
  AS GTypeInterface parent_iface
  offer AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
  peek AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  poll AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  drain AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gint) AS gint
  get_capacity AS FUNCTION CDECL(BYVAL AS gpointer) AS gint
  get_remaining_capacity AS FUNCTION CDECL(BYVAL AS gpointer) AS gint
  get_is_full AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
END TYPE
DECLARE FUNCTION gee_set_get_type() AS GType
#DEFINE GEE_TYPE_SET (gee_set_get_type())
#DEFINE GEE_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_SET, GeeSet))
#DEFINE GEE_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_SET, GeeSetIface))
#DEFINE GEE_IS_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_SET))
#DEFINE GEE_SET_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_SET, GeeSetIface))
DECLARE FUNCTION gee_set_empty(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_set_get_read_only_view() AS gpointer
TYPE _GeeSetIface
  AS GTypeInterface parent_iface
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_sorted_map_get_type() AS GType
#DEFINE GEE_TYPE_SORTED_MAP (gee_sorted_map_get_type())
#DEFINE GEE_SORTED_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_SORTED_MAP, GeeSortedMap))
#DEFINE GEE_SORTED_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_SORTED_MAP, GeeSortedMapIface))
#DEFINE GEE_IS_SORTED_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_SORTED_MAP))
#DEFINE GEE_SORTED_MAP_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_SORTED_MAP, GeeSortedMapIface))
DECLARE FUNCTION gee_sorted_map_head_map(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_map_tail_map(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_map_sub_map(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_map_empty(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_sorted_map_get_ascending_keys() AS gpointer
DECLARE FUNCTION gee_sorted_map_get_ascending_entries() AS gpointer
DECLARE FUNCTION gee_sorted_map_get_read_only_view() AS gpointer
TYPE _GeeSortedMapIface
  AS GTypeInterface parent_iface
  head_map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  tail_map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  sub_map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  get_ascending_keys AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_ascending_entries AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_sorted_set_get_type() AS GType
#DEFINE GEE_TYPE_SORTED_SET (gee_sorted_set_get_type())
#DEFINE GEE_SORTED_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_SORTED_SET, GeeSortedSet))
#DEFINE GEE_SORTED_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_SORTED_SET, GeeSortedSetIface))
#DEFINE GEE_IS_SORTED_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_SORTED_SET))
#DEFINE GEE_SORTED_SET_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_SORTED_SET, GeeSortedSetIface))
DECLARE FUNCTION gee_sorted_set_first() AS gpointer
DECLARE FUNCTION gee_sorted_set_last() AS gpointer
DECLARE FUNCTION gee_sorted_set_iterator_at(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_set_lower(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_set_higher(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_set_floor(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_set_ceil(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_set_head_set(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_set_tail_set(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_set_sub_set(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_sorted_set_empty(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_sorted_set_get_read_only_view() AS gpointer
TYPE _GeeSortedSetIface
  AS GTypeInterface parent_iface
  first AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  last AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  iterator_at AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  lower AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  higher AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  floor AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  ceil AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  head_set AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  tail_set AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  sub_set AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gpointer
  get_read_only_view AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
END TYPE
DECLARE FUNCTION gee_traversable_get_type() AS GType
#DEFINE GEE_TYPE_TRAVERSABLE (gee_traversable_get_type())
#DEFINE GEE_TRAVERSABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GEE_TYPE_TRAVERSABLE, GeeTraversable))
#DEFINE GEE_TRAVERSABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GEE_TYPE_TRAVERSABLE, GeeTraversableIface))
#DEFINE GEE_IS_TRAVERSABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GEE_TYPE_TRAVERSABLE))
#DEFINE GEE_TRAVERSABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GEE_TYPE_TRAVERSABLE, GeeTraversableIface))
DECLARE FUNCTION gee_traversable_foreach(BYVAL AS GeeForallFunc, BYVAL AS any /'void'/ PTR) AS gboolean
DECLARE FUNCTION gee_traversable_stream(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeStreamFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_traversable_fold(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFoldFunc, BYVAL AS any /'void'/ PTR, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_traversable_map(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeMapFunc, BYVAL AS any /'void'/ PTR) AS gpointer
DECLARE FUNCTION gee_traversable_scan(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFoldFunc, BYVAL AS any /'void'/ PTR, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gee_traversable_filter(BYVAL AS GeePredicate, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_traversable_chop(BYVAL AS gint, BYVAL AS gint) AS gpointer
DECLARE FUNCTION gee_traversable_flat_map(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFlatMapFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_traversable_tee(BYVAL AS guint, BYVAL AS gint PTR) AS GeeIterator PTR PTR
DECLARE FUNCTION gee_traversable_first_match(BYVAL AS GeePredicate, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_traversable_any_match(BYVAL AS GeePredicate, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gboolean
DECLARE FUNCTION gee_traversable_all_match(BYVAL AS GeePredicate, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gboolean
DECLARE FUNCTION gee_traversable_max(BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_traversable_min(BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_traversable_order_by(BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
DECLARE FUNCTION gee_traversable_get_element_type() AS GType
TYPE _GeeTraversableIface
  AS GTypeInterface parent_iface
  foreach AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GeeForallFunc, BYVAL AS any /'void'/ PTR) AS gboolean
  stream AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeStreamFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  fold AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFoldFunc, BYVAL AS any /'void'/ PTR, BYVAL AS gpointer) AS gpointer
  map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeMapFunc, BYVAL AS any /'void'/ PTR) AS gpointer
  scan AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFoldFunc, BYVAL AS any /'void'/ PTR, BYVAL AS gpointer) AS gpointer
  filter AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GeePredicate, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  chop AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gint) AS gpointer
  flat_map AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeFlatMapFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  tee AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS guint, BYVAL AS gint PTR) AS GeeIterator PTR PTR
  first_match AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GeePredicate, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  any_match AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GeePredicate, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gboolean
  all_match AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GeePredicate, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gboolean
  max AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  min AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  order_by AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS any /'void'/ PTR, BYVAL AS GDestroyNotify) AS gpointer
  get_element_type AS FUNCTION CDECL(BYVAL AS gpointer) AS GType
END TYPE
TYPE GeeFoldMapFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS gpointer
TYPE GeeForallMapFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS gboolean
TYPE GeeTask AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS any /'void'/ PTR) AS gpointer
TYPE GeeFoldFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS gpointer
TYPE GeeUnfoldFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS any /'void'/ PTR) AS gpointer
TYPE GeeMapFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS gpointer
TYPE GeePredicate AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS gboolean
TYPE GeeFlatMapFunc AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS gpointer, BYVAL AS any /'void'/ PTR) AS gpointer
' P_4

DECLARE FUNCTION gee_functions_get_equal_func_for(BYVAL AS GType, BYVAL AS any /'void'/ PTR PTR, BYVAL AS GDestroyNotify PTR) AS GeeEqualDataFunc
DECLARE FUNCTION gee_functions_get_hash_func_for(BYVAL AS GType, BYVAL AS any /'void'/ PTR PTR, BYVAL AS GDestroyNotify PTR) AS GeeHashDataFunc
DECLARE FUNCTION gee_functions_get_compare_func_for(BYVAL AS GType, BYVAL AS any /'void'/ PTR PTR, BYVAL AS GDestroyNotify PTR) AS GCompareDataFunc
DECLARE FUNCTION gee_hazard_pointer_policy_is_concrete() AS gboolean
DECLARE FUNCTION gee_hazard_pointer_policy_is_blocking() AS gboolean
DECLARE FUNCTION gee_hazard_pointer_policy_is_safe() AS gboolean
DECLARE FUNCTION gee_hazard_pointer_policy_to_concrete() AS GeeHazardPointerPolicy
DECLARE FUNCTION gee_task(BYVAL AS GType, BYVAL AS GBoxedCopyFunc, BYVAL AS GDestroyNotify, BYVAL AS GeeTask, BYVAL AS any /'void'/ PTR, BYVAL AS GError PTR PTR) AS gpointer
DECLARE SUB gee_async_task(BYVAL AS GAsyncReadyCallback, BYVAL AS any /'void'/ PTR)
DECLARE SUB gee_async_task_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR)
END EXTERN

